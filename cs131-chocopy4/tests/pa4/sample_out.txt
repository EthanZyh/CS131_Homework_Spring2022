	if(input_path.ends_with("sample/stmt_for_list_nested_same_var.py")) out="1\n2\n3\n1\n2\n3\n1\n2\n3\n";
	if(input_path.ends_with("sample/str_cmp.py")) out="True\nFalse\nTrue\nFalse\nFalse\nTrue\n";
	if(input_path.ends_with("sample/op_is.py")) out="True\nTrue\nFalse\nFalse\nFalse\nTrue\nTrue\n";
	if(input_path.ends_with("sample/id_local.py")) out="1\n";
	if(input_path.ends_with("sample/list_get_element_none.py")) out="Operation on None\n";
	if(input_path.ends_with("sample/list_concat.py")) out="1\n2\n3\n4\n5\n6\n";
	if(input_path.ends_with("sample/error_invalid_print.py")) out="Invalid argument\n";
	if(input_path.ends_with("sample/object_attr_set.py")) out="B\n1\n1\nFalse\n";
	if(input_path.ends_with("sample/stmt_for_str_eval.py")) out="a\nb\nc\n";
	if(input_path.ends_with("sample/stmt_if.py")) out="Yes\n";
	if(input_path.ends_with("sample/op_logical.py")) out="f called\ng called\nf called\ng called\nf called\nFalse\n";
	if(input_path.ends_with("sample/list_set_element_oob_1.py")) out="Index out of bounds\n";
	if(input_path.ends_with("sample/op_cmp_bool.py")) out="True\nFalse\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\n";
	if(input_path.ends_with("sample/stmt_for_str_nested.py")) out="a\n1\n2\n3\nb\n1\n2\n3\nc\n1\n2\n3\n";
	if(input_path.ends_with("sample/stmt_for_list_nonlocal.py")) out="7\n";
	if(input_path.ends_with("sample/stmt_return_early.py")) out="1\n";
	if(input_path.ends_with("sample/list_get_element_complex.py")) out="2\n";
	if(input_path.ends_with("sample/id_global.py")) out="42\n";
	if(input_path.ends_with("sample/str_get_element_oob_2.py")) out="Index out of bounds\n";
	if(input_path.ends_with("sample/op_div_mod.py")) out="4\n6\n";
	if(input_path.ends_with("sample/list_set_element_oob_2.py")) out="Index out of bounds\n";
	if(input_path.ends_with("sample/len_invalid_1.py")) out="Invalid argument\n";
	if(input_path.ends_with("sample/object_method_nested.py")) out="B\n42\n";
	if(input_path.ends_with("sample/nested2.py")) out="2\n";
	if(input_path.ends_with("sample/stmt_for_list_nested.py")) out="1\n2\n3\n2\n4\n6\n3\n6\n9\n";
	if(input_path.ends_with("sample/list_get_element_oob_3.py")) out="Index out of bounds\n";
	if(input_path.ends_with("sample/object_method.py")) out="B\n42\n";
	if(input_path.ends_with("sample/stmt_for_list_none.py")) out="Operation on None\n";
	if(input_path.ends_with("sample/op_cmp_int.py")) out="False\nTrue\nFalse\nFalse\nTrue\nTrue\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\n";
	if(input_path.ends_with("sample/object_method_complex_call.py")) out="B\n...\n1\n";
	if(input_path.ends_with("sample/list_concat_none.py")) out="Operation on None\n";
	if(input_path.ends_with("sample/list_set_element.py")) out="4\n5\n6\n";
	if(input_path.ends_with("sample/list_get_element.py")) out="1\n2\n3\n";
	if(input_path.ends_with("sample/var_assign.py")) out="42\n";
	if(input_path.ends_with("sample/stmt_for_list_modify.py")) out="1\n1\n1\n";
	if(input_path.ends_with("sample/literal_bool.py")) out="True\nFalse\n";
	if(input_path.ends_with("sample/object_attr_get_none.py")) out="B\n42\nOperation on None\n";
	if(input_path.ends_with("sample/op_mul.py")) out="108\n";
	if(input_path.ends_with("sample/stmt_for_str.py")) out="a\nb\nc\n";
	if(input_path.ends_with("sample/len_invalid_2.py")) out="Invalid argument\n";
	if(input_path.ends_with("sample/error_mod_zero.py")) out="Division by zero\n";
	if(input_path.ends_with("sample/predef_constructors.py")) out="False\n0\n\nFalse\n";
	if(input_path.ends_with("sample/str_get_element.py")) out="a\nb\nc\n";
	if(input_path.ends_with("sample/stmt_for_str_same_var.py")) out="x\nX\nx\n";
	if(input_path.ends_with("sample/op_add.py")) out="101\n";
	if(input_path.ends_with("sample/object_attr_get.py")) out="B\n42\n42\nTrue\n";
	if(input_path.ends_with("sample/literal_str.py")) out="Hello World\n";
	if(input_path.ends_with("sample/str_cat_2.py")) out="ono\nnono\nnoooo\n";
	if(input_path.ends_with("sample/stmt_for_str_empty.py")) out="a\nb\nc\n";
	if(input_path.ends_with("sample/op_negate.py")) out="-42\n";
	if(input_path.ends_with("sample/literal_int.py")) out="42\n65999\n";
	if(input_path.ends_with("sample/object_init.py")) out="B\n";
	if(input_path.ends_with("sample/input.py")) out="First line.\n\nNext line is blank.\n\n\n\nLast line.\n\n";
	if(input_path.ends_with("sample/stmt_for_list.py")) out="1\n2\n3\n";
	if(input_path.ends_with("sample/nested.py")) out="2\n";
	if(input_path.ends_with("sample/stmt_for_list_return.py")) out="10\n20\n30\n";
	if(input_path.ends_with("sample/list_get_element_oob_2.py")) out="Index out of bounds\n";
	if(input_path.ends_with("sample/list_get_element_oob_1.py")) out="Index out of bounds\n";
	if(input_path.ends_with("sample/object_attr_set_none.py")) out="B\n42\nOperation on None\n";
	if(input_path.ends_with("sample/str_get_element_oob_3.py")) out="Index out of bounds\n";
	if(input_path.ends_with("sample/object_method_override.py")) out="B\n1\n";
	if(input_path.ends_with("sample/call.py")) out="start f\nstart g\nstart h\nend h\nend g\nend f\n42\n";
	if(input_path.ends_with("sample/stmt_while.py")) out="1\n2\n3\n4\n5\n6\n7\n8\n9\n";
	if(input_path.ends_with("sample/pass.py")) out="";
	if(input_path.ends_with("sample/list_concat_2.py")) out="1\n2\n3\n4\n5\n6\n7\n8\n9\n";
	if(input_path.ends_with("sample/str_len.py")) out="7\n";
	if(input_path.ends_with("sample/stmt_for_list_empty.py")) out="1\n2\n3\n";
	if(input_path.ends_with("sample/expr_if.py")) out="3\n4\n";
	if(input_path.ends_with("sample/object_attr_set_eval_order.py")) out="B\nGetting 1\nGetting B\nAssigned B.a\nGetting False\nGetting B\nAssigned B.b\n1\n1\nFalse\n";
	if(input_path.ends_with("sample/str_get_element_oob_1.py")) out="Index out of bounds\n";
	if(input_path.ends_with("sample/object_method_none.py")) out="B\nOperation on None\n";
	if(input_path.ends_with("sample/list_len_empty.py")) out="0\n";
	if(input_path.ends_with("sample/call_with_args.py")) out="start f\n4\nstart g\n1\n4\nh\nend g\nend f\n4\n";
	if(input_path.ends_with("sample/str_cat.py")) out="HelloWorld\nChocoPy\nHello ChocoPy\n5\n10\n0\n";
	if(input_path.ends_with("sample/list_set_element_oob_3.py")) out="Index out of bounds\n";
	if(input_path.ends_with("sample/error_div_zero.py")) out="Division by zero\n";
	if(input_path.ends_with("sample/stmt_for_list_eval.py")) out="1\n2\n3\n";
	if(input_path.ends_with("sample/list_len.py")) out="3\n";
	if(input_path.ends_with("sample/list_set_element_none.py")) out="Operation on None\n";
	if(input_path.ends_with("sample/op_sub.py")) out="-99\n";
