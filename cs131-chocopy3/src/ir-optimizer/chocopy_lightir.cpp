#include "GlobalVariable.hpp"
#include "Type.hpp"
#include <chocopy_lightir.hpp>
#include <chocopy_parse.hpp>
#include <chocopy_semant.hpp>
#include <fstream>
#include <queue>
#if __cplusplus > 202000L && !defined(__clang__)
#include <ranges>
#endif
#include <regex>

namespace semantic {
class SemanticError;
class SymbolTable;
class DeclarationAnalyzer;
class TypeChecker;
} // namespace semantic
namespace lightir {
Type *VOID_T;
Type *BOOL_T;
Type *INT_T;
Type *ARR_T;
Type *STR_T;
auto OBJ_T = new vector<Type *>();
const std::regex to_replace("(\\$(.+?)+\\.)|\\$");
const std::regex to_replace_prev(".+?\\.");
const std::regex to_replace_post("\\..+?$");
#define CONST(num) ConstantInt::get(num, &*module)
vector<Constant *> new_array;
vector<Value *> init_val;
vector<BasicBlock *> base_layer;
vector<BasicBlock *> for_layer_stack;
vector<string> nonlocal_symbol;
vector<string> iterable_symbol;
Value *to_stored_class;
bool is_local_global = false;
bool is_member_call = false;
bool should_pass = false;
bool is_func_def = true;
/** Store the tmp value */
Value *tmp_value;
int tmp_int = 0;
/** Check whether is rval */
bool is_rval = true;
string tmp_string;
/** Check whether is the int variable */
bool use_int = false;
/** Check whether use the conslist to initialize a list */
bool is_conslist = false;
/** If there's no function or class or doubly list or above
 * just skip all the global conslist */
bool is_global_conslist = false;
/** Function that is being built */
Function *curr_func = nullptr;
Class *curr_class = nullptr;

/** Use the symbol table to generate the type id */
int LightWalker::get_next_type_id() { return next_type_id++; }

int LightWalker::get_const_type_id() { return next_const_id++; }

int LightWalker::get_class_id(const string &name) const { return sym->class_tag_[name]; }

string LightWalker::get_nested_func_name(semantic::SymbolTable *func_sym, string &name) {
    if (func_sym->parent) {
        for (const auto &x : *func_sym->tab)
            if ((x.second)->is_func_type())
                if (dynamic_cast<semantic::FunctionDefType *>(x.second)) {
                    if (x.second->get_name() == name) {
                        func_found = true;
                        break;
                    }
                    name = get_nested_func_name(((semantic::FunctionDefType *)x.second)->current_scope, name);
                    if (func_found) {
                        name = x.second->get_name() + "." + name;
                        break;
                    }
                }
    } else if (curr_class != nullptr) {
        string tmp_name = name;
        for (const auto &x : *func_sym->tab) {
            if (dynamic_cast<semantic::ClassDefType *>(x.second) &&
                dynamic_cast<semantic::ClassDefType *>(x.second)->get_name() == curr_class->get_string()) {
                func_sym = dynamic_cast<semantic::ClassDefType *>(x.second)->current_scope;
            }
        }
        semantic::SymbolTable *tmp_sym = func_sym;
        std::queue<semantic::SymbolTable *> q;
        q.push(func_sym);
        while (!q.empty()) {
            int sz = q.size();
            for (int i = 0; i < sz; ++i) {
                tmp_sym = q.front();
                q.pop();
                for (const auto &x : *tmp_sym->tab)
                    if ((x.second)->is_func_type())
                        if (dynamic_cast<semantic::FunctionDefType *>(x.second)) {
                            if (x.second->get_name() == name) {
                                func_found = true;
                                break;
                            }
                            q.push(dynamic_cast<semantic::FunctionDefType *>(x.second)->current_scope);
                        }
                if (func_found)
                    break;
            }
            if (func_found) {
                func_found = false;
                break;
            }
        }

        for (const auto &x : *tmp_sym->tab)
            if ((x.second)->is_func_type())
                if (dynamic_cast<semantic::FunctionDefType *>(x.second)) {
                    if (x.second->get_name() == name) {
                        func_found = true;
                        break;
                    }
                    name = get_nested_func_name(((semantic::FunctionDefType *)x.second)->current_scope, name);
                    if (func_found) {
                        name = x.second->get_name() + "." + name;
                        break;
                    }
                }
        if (name.find(curr_class->get_name()) != string::npos) {
            name = curr_class->get_name() + "." + name;
        }
    }
    return name;
}

/** if the tpe is local and no function call, it shall not init the @$list$prototype */
Type *LightWalker::string_to_type(const string &type_name) {
    Type *inside_loaded = nullptr;
    if (type_name == "int")
        return INT_T;
    else if (type_name == "bool")
        return BOOL_T;
    else if (type_name == "str")
        return OBJ_T->at(3);
    else if (type_name == "object")
        return OBJ_T->at(0);
    else if (type_name.starts_with("[")) {
        inside_loaded = ArrayType::get(list_class->get_type());
    } else if (!type_name.empty()) {
        auto res_num = sym->class_tag_[type_name];
        if (res_num <= 3)
            return OBJ_T->at(res_num);
        else {
            if (res_num<OBJ_T->size()) {
                return ArrayType::get(OBJ_T->at(res_num));
            }else {
                return ArrayType::get(OBJ_T->at(res_num-1));
            }
        }
    } else
        return VOID_T;

    return inside_loaded;
}

Type *LightWalker::string_to_type_no_conslist(const string &type_name) {
    Type *inside_loaded = nullptr;
    if (type_name.find("int") != std::string::npos) {
        inside_loaded = Type::get_int32_type(&*module);
    } else if (type_name.find("bool") != std::string::npos) {
        inside_loaded = Type::get_int1_type(&*module);
    } else if (type_name.find("str") != std::string::npos) {
        inside_loaded = Type::get_str_type(&*module);
    } else if (type_name.starts_with("[")) {
        inside_loaded = ArrayType::get(list_class->get_type());
        if (type_name.find("int") != std::string::npos) // get an uninitialized item
            inside_loaded = get_module()->get_int32_type();
        else if (type_name.find("bool") != std::string::npos)
            inside_loaded = get_module()->get_int1_type();
        else if (type_name.find("str") != std::string::npos)
            inside_loaded = get_module()->get_str_type();
        for (int i = 0; i < std::count(type_name.begin(), type_name.end(), '['); i++) {
            inside_loaded = ArrayType::get(inside_loaded);
        }
    }
    return inside_loaded;
}

Type *LightWalker::string_to_type_conslist(string type_name) {
    Value *inside_loaded = nullptr;
    Type *result_loaded = nullptr;
    auto const_str = scope.find("const_3");
    if (type_name == "int")
        return OBJ_T->at(1);
    else if (type_name == "bool")
        return OBJ_T->at(2);
    else if (type_name == "str")
        return OBJ_T->at(3);
    else if (type_name.starts_with("[")) {
        if (type_name.find("int") != std::string::npos) // get an uninitialized item
            inside_loaded = CONST(0);
        else if (type_name.find("bool") != std::string::npos)
            inside_loaded = CONST(false);
        else if (type_name.find("str") != std::string::npos)
            inside_loaded = const_str;
        for (int i = 0; i < std::count(type_name.begin(), type_name.end(), '['); i++) {
            inside_loaded = List::get(list_class, {inside_loaded}, "const_" + std::to_string(get_const_type_id()));
        }
        result_loaded = dynamic_cast<List *>(inside_loaded);
    } else if (!type_name.empty()) {
        return OBJ_T->at(sym->class_tag_[type_name]);
    } else
        return VOID_T;

    return result_loaded;
}

Type *LightWalker::string_to_type_conslist_init(string type_name) {
    Value *inside_loaded = nullptr;
    Type *result_loaded = nullptr;
    auto const_str = scope.find("const_3");
    if (type_name == "int")
        return OBJ_T->at(1);
    else if (type_name == "bool")
        return OBJ_T->at(2);
    else if (type_name == "str")
        return OBJ_T->at(3);
    else if (type_name.starts_with("[")) {
        if (type_name.find("int") != std::string::npos) // get an uninitialized item
            inside_loaded = CONST(0);
        else if (type_name.find("bool") != std::string::npos)
            inside_loaded = CONST(false);
        else if (type_name.find("str") != std::string::npos)
            inside_loaded = const_str;
        for (int i = 0; i < std::count(type_name.begin(), type_name.end(), '['); i++) {
            inside_loaded = list_class;
        }
        result_loaded = list_class;
    } else if (!type_name.empty()) {
        return OBJ_T->at(sym->class_tag_[type_name]);
    } else
        return VOID_T;

    return result_loaded;
}

LightWalker::LightWalker(semantic::SymbolTable *sym) : sym(sym) {
    module = std::make_unique<Module>("ChocoPy code");
    builder = new IRBuilder(nullptr, module.get());

    auto TyVoid = Type::get_void_type(&*module);
    auto TyI32 = Type::get_int32_type(&*module);
    auto TyI1 = Type::get_int1_type(&*module);
    auto TyString = Type::get_str_type(&*module);
    auto I8 = new IntegerType(8, &*module);
    auto TyArrI32 = Type::get_array_type(new IntegerType(32, &*module));
    auto TyArrI1 = Type::get_array_type(new IntegerType(1, &*module));
    auto TyArrStr = Type::get_array_type(new StringType("", &*module));

    /** Get the class ready. */
    std::vector<Type *> object_params;

    object_class = new Class(&*module, "object", get_next_type_id(), nullptr, true, true);
    auto TyObject = object_class->get_type();
    object_params.emplace_back(
        ArrayType::get(LabelType::get("$object$prototype", dynamic_cast<Class *>(TyObject), &*module)));
    auto object_init = new Function(FunctionType::get(TyVoid, object_params), "$object.__init__", &*module);
    object_class->add_method(object_init);
    int_class = new Class(&*module, "int", get_next_type_id(), nullptr, true, true);
    auto TyIntClass = int_class->get_type();
    int_class->add_method(object_init);
    int_class->add_attribute(new AttrInfo(TyI32, "__int__"));
    bool_class = new Class(&*module, "bool", get_next_type_id(), nullptr, true, true);
    auto TyBoolClass = bool_class->get_type();
    bool_class->add_method(object_init);
    bool_class->add_attribute(new AttrInfo(TyI1, "__bool__"));
    str_class = new Class(&*module, "str", get_next_type_id(), nullptr, true, true);
    auto TyStrClass = str_class->get_type();
    str_class->add_method(object_init);
    str_class->add_attribute(new AttrInfo(TyI32, "__len__", 0));
    str_class->add_attribute(new AttrInfo(TyString, "__str__"));

    vector<Type *> union_vec;
    auto TyPtrObject = new ArrayType(TyObject);
    auto TyPtrInt = new ArrayType(TyIntClass);
    auto TyPtrBool = new ArrayType(TyBoolClass);
    auto TyPtrStr = new ArrayType(TyStrClass);
    union_vec.emplace_back(TyPtrInt);
    union_vec.emplace_back(TyPtrBool);
    union_vec.emplace_back(TyPtrStr);
    union_vec.emplace_back(TyPtrObject);
    auto union_list = new Union(union_vec, "type");
    list_class = new Class(&*module, ".list", -1, nullptr, false);
    list_class->add_method(object_init);
    list_class->add_attribute(new AttrInfo(ArrayType::get(union_list), "", union_list));
    list_class->add_attribute(new AttrInfo(TyI32, "__len__", 0));

    auto TyListClass = list_class->get_type();
    auto TyPtrList = new ArrayType(TyListClass);

    /** Predefined functions. */
    std::vector<Type *> heat_init_params;
    auto heat_init_type = FunctionType::get(TyVoid, heat_init_params);
    auto heat_init_fun = Function::create(heat_init_type, "heap.init", module.get());

    std::vector<Type *> initchars_params;
    initchars_params.emplace_back(I8);
    auto initchars_type =
        FunctionType::get(ArrayType::get(LabelType::get("$str$prototype", str_class, &*module)), initchars_params);
    auto initchars_fun = Function::create(initchars_type, "initchars", module.get());

    std::vector<Type *> noconv_params;
    auto noconv_type =
        FunctionType::get(ArrayType::get(LabelType::get("$int$prototype", int_class, &*module)), noconv_params);
    auto noconv_fun = Function::create(noconv_type, "noconv", module.get());

    std::vector<Type *> nonlist_params;
    auto nonlist_type = FunctionType::get(TyPtrList, nonlist_params);
    auto nonlist_fun = Function::create(nonlist_type, "nonlist", module.get());

    std::vector<Type *> error_oob_params;
    auto error_oob_type = FunctionType::get(TyVoid, error_oob_params);
    auto error_oob_fun = Function::create(error_oob_type, "error.OOB", module.get());
    std::vector<Type *> error_none_params;
    auto error_none_type = FunctionType::get(TyVoid, error_none_params);
    auto error_none_fun = Function::create(error_none_type, "error.None", module.get());
    std::vector<Type *> error_div_params;
    auto error_div_type = FunctionType::get(TyVoid, error_div_params);
    auto error_div_fun = Function::create(error_none_type, "error.Div", module.get());

    scope.enter();
    scope.push(union_list->get_name(), union_list);
    scope.push("object.__init__", object_init);
    scope.push("heap.init", heat_init_fun);
    scope.push("initchars", initchars_fun);
    scope.push("noconv", noconv_fun);
    scope.push("nonlist", nonlist_fun);

    scope.push("error.OOB", error_oob_fun);
    scope.push("error.None", error_none_fun);
    scope.push("error.Div", error_div_fun);

    scope.push("object", object_class);
    scope.push("int", int_class);
    scope.push("bool", bool_class);
    scope.push("str", str_class);
    scope.push(".list", list_class);

    module->add_union(union_list);
}

/**
 * Analyze PROGRAM, creating Info objects for all symbols.
 * Populate the global symbol table.
 */
void LightWalker::visit(parser::Program &node) {
    VOID_T = Type::get_void_type(module.get());
    BOOL_T = Type::get_int1_type(module.get());
    INT_T = Type::get_int32_type(module.get());
    STR_T = Type::get_str_type(module.get());
    ARR_T = Type::get_array_type(module.get());

    for (const auto &obj_type : sym->class_tag_) {
        if (obj_type.first == "list")
            module->add_class_type(new Class(&*module, ".list", obj_type.second, nullptr));
        else if (obj_type.first == "str" || obj_type.first == "int" || obj_type.first == "bool")
            module->add_class_type(new Class(&*module, obj_type.first, obj_type.second, nullptr));
    }
    for (int i = 0; i < sym->class_tag_.size(); i++) {
        OBJ_T->emplace_back(Type::get_class_type(module.get(), i));
    }
    OBJ_T->at(0) = object_class;

    /** Some function that requires the OBJ_T to define */
    auto TyPtrList = ArrayType::get(list_class->get_type());
    auto TyPtrObj = ArrayType::get(module->get_class().front());
    // FIXME: auto TyPtrObj = LabelType::get("$object$prototype_type",get_module()->get_class().front(), module.get());
    auto TyPtrInt = ArrayType::get(OBJ_T->at(1));
    auto TyPtrBool = ArrayType::get(OBJ_T->at(2));
    auto TyPtrStr = ArrayType::get(OBJ_T->at(3));
    vector<Type *> union_len_vec;
    vector<Type *> union_put_vec;
    vector<Type *> union_conslist_vec;
    union_len_vec.emplace_back(TyPtrList);
    union_len_vec.emplace_back(TyPtrStr);
    union_put_vec.emplace_back(TyPtrInt);
    union_put_vec.emplace_back(TyPtrBool);
    union_put_vec.emplace_back(TyPtrStr);
    union_conslist_vec.emplace_back(INT_T);
    union_conslist_vec.emplace_back(BOOL_T);
    union_conslist_vec.emplace_back(TyPtrStr);
    union_conslist_vec.emplace_back(TyPtrList);
    union_len = new Union(union_len_vec, "len");
    union_put = new Union(union_put_vec, "put");
    union_conslist = new Union(union_conslist_vec, "conslist");
    list_class->add_attribute(new AttrInfo(ArrayType::get(union_conslist), "__list__", 0));
    std::vector<Type *> concat_params;
    std::vector<Type *> conslist_params;
    concat_params.emplace_back(TyPtrList);
    concat_params.emplace_back(TyPtrList);
    conslist_params.emplace_back(INT_T);
    conslist_params.emplace_back(union_conslist);
    auto concat_type = FunctionType::get(TyPtrList, concat_params);
    auto conslist_type = FunctionType::get(TyPtrList, conslist_params, true);
    auto concat_fun = Function::create(concat_type, "concat", module.get());
    auto conslist_fun = Function::create(conslist_type, "conslist", module.get());

    std::vector<Type *> len_params;
    len_params.emplace_back(ArrayType::get(union_len));
    auto len_type = FunctionType::get(INT_T, len_params);
    auto len_fun = Function::create(len_type, "$len", module.get());

    std::vector<Type *> put_params;
    put_params.emplace_back(ArrayType::get(union_put));
    auto put_type = FunctionType::get(VOID_T, put_params);
    auto put_fun = Function::create(put_type, "print", module.get());

    std::vector<Type *> makebool_params;
    std::vector<Type *> makeint_params;
    std::vector<Type *> makestr_params;
    makebool_params.emplace_back(BOOL_T);
    makeint_params.emplace_back(INT_T);
    makestr_params.emplace_back(TyPtrStr);
    auto makebool_type = FunctionType::get(TyPtrBool, makebool_params);
    auto makeint_type = FunctionType::get(TyPtrInt, makeint_params);
    auto makestr_type = FunctionType::get(TyPtrStr, makestr_params);
    auto makebool_fun = Function::create(makebool_type, "makebool", module.get());
    auto makeint_fun = Function::create(makeint_type, "makeint", module.get());
    auto makestr_fun = Function::create(makestr_type, "makestr", module.get());

    auto input_type = FunctionType::get(TyPtrStr, {});
    auto input_fun = Function::create(input_type, "$input", module.get());

    auto alloc_type = FunctionType::get(ArrayType::get(LabelType::get("$object$prototype", object_class, &*module)),
                                        {ArrayType::get(LabelType::get("$object$prototype", object_class, &*module))});
    auto alloc_fun = Function::create(alloc_type, "alloc", module.get());

    std::vector<Type *> strcat_params;
    std::vector<Type *> str_params;
    str_params.emplace_back(TyPtrStr);
    str_params.emplace_back(TyPtrStr);
    strcat_params.emplace_back(TyPtrStr);
    strcat_params.emplace_back(TyPtrStr);
    auto str_type = FunctionType::get(BOOL_T, str_params);
    auto strcat_type = FunctionType::get(TyPtrStr, strcat_params);
    auto streql_fun = Function::create(str_type, "streql", module.get());
    auto strneql_fun = Function::create(str_type, "strneql", module.get());
    auto strcat_fun = Function::create(strcat_type, "strcat", module.get());

    scope.push("$input", input_fun);
    scope.push("strcat", strcat_fun);
    scope.push("streql", streql_fun);
    scope.push("strneql", strneql_fun);
    scope.push("makebool", makebool_fun);
    scope.push("makeint", makeint_fun);
    scope.push("makestr", makestr_fun);
    scope.push("$len", len_fun);
    scope.push("print", put_fun);
    scope.push("concat", concat_fun);
    scope.push("alloc", alloc_fun);
    scope.push("conslist", conslist_fun);
    module->add_union(union_len);
    module->add_union(union_put);
    module->add_union(union_conslist);

    /** Global variable in the stdlib */
    GlobalVariable *const_;
    auto const_vect = {0, 1};
    for (auto &&num : const_vect) {
        const_ = GlobalVariable::create(fmt::format("const_{}", num), &*this->module, OBJ_T->at(2), false, nullptr);
        scope.push(fmt::format("const_{}", num), const_);
    }
    auto const_vect_1 = {2, 3, 4, 5, 6, 7};
    for (auto &&num : const_vect_1) {
        const_ = GlobalVariable::create(fmt::format("const_{}", num), &*this->module, OBJ_T->at(3), false, nullptr);
        scope.push(fmt::format("const_{}", num), const_);
    }

    /** First set the function to before_main. */
    std::vector<Type *> param_types;
    auto func_type = FunctionType::get(VOID_T, param_types);

    curr_func = Function::create(true, func_type, "before_main", module.get());
    auto beforeBB = BasicBlock::create(&*module, "before_main", curr_func);
    builder->set_insert_point(beforeBB);
#ifdef RV64
    builder->create_asm("lui a0, 8192\\0A\tadd s11, zero, a0");
    vector<Value *> arg_params;
    Value *called = scope.find("heap.init");
    builder->create_call(called, arg_params);
    builder->create_asm("mv s10, gp\\0A\tadd s11, s11, s10\\0A\tmv fp, zero\\0A\tlw ra, 8(sp)\\0A\taddi "
                        "sp, sp, 16\\0A\tret");
#else
    builder->create_asm("lui a0, 8192\\0A\tadd s11, zero, a0");
    vector<Value *> arg_params;
    Value *called = scope.find("heap.init");
    builder->create_call(called, arg_params);
    builder->create_asm("mv s10, gp\\0A\tadd s11, s11, s10\\0A\tmv fp, zero\\0A\tlw ra, 12(sp)\\0A\taddi "
                        "sp, sp, 16\\0A\tret");
#endif
    /** Proceed in phases:
     * 1. Analyze all global variable declarations.
     *    Do this first so that global variables are in the symbol
     *    table before we encounter `global x` declarations.
     * 2. Analyze classes and global functions now that global variables
     *    are in the symbol table.
     */
    curr_func = Function::create(func_type, "main", module.get());
    auto baseBB = BasicBlock::create(&*module, "", curr_func);
    base_layer.emplace_back(baseBB);
    builder->set_insert_point(baseBB);
    builder->create_asm("addi fp, sp, 0");
    scope.push("main", curr_func);

    for (auto &&decl : *node.declarations) {
        /** Nested func variable cal Symbol table rebuilt. */
        if (dynamic_cast<parser::FuncDef *>(decl) && !dynamic_cast<parser::FuncDef *>(decl)->lambda_params->empty()) {
            /** %class.anon = type { i32* }  */
            auto class_anon = new Class(&*this->module, dynamic_cast<parser::FuncDef *>(decl)->name->name, true);
            /** declare type in Symbol table */
            for (auto &&passed_lambda_value : *dynamic_cast<parser::FuncDef *>(decl)->lambda_params) {
                auto param_type = scope.find(passed_lambda_value);
                if (param_type) {
                    if (dynamic_cast<Class *>(param_type)) {
                        class_anon->add_attribute(
                            new AttrInfo(ArrayType::get(param_type->get_type()), passed_lambda_value, param_type));
                    } else {
                        class_anon->add_attribute(
                            new AttrInfo(param_type->get_type(), passed_lambda_value, param_type));
                    }
                }
            }
            scope.push(fmt::format("$class.anon_{}", dynamic_cast<parser::FuncDef *>(decl)->name->name), class_anon);
        }
        decl->accept(*this);
    }
    for (auto stmt : *node.statements) {
        stmt->accept(*this);
    }
    /** For Optimization Debug */
    for (auto &func : this->module->get_functions()) {
        func->set_instr_name();
    }

    builder->create_asm("li a7, 93 #exit system call\\0A"
                        "ecall");
    builder->create_void_ret();
}

/* The Light IR Your Code Here */
using namespace parser;
void LightWalker::visit(BinaryExpr &node){

}
void LightWalker::visit(BoolLiteral &node){
    
}
void LightWalker::visit(CallExpr &node){
    
}
void LightWalker::visit(ClassDef &node){
    
}
void LightWalker::visit(ClassType &node){
    
}
void LightWalker::visit(ExprStmt &node){
    
}
void LightWalker::visit(ForStmt &node){
    
}
void LightWalker::visit(FuncDef &node){
    
}
void LightWalker::visit(GlobalDecl &node){
    
}
void LightWalker::visit(Ident &node){
    
}
void LightWalker::visit(IfExpr &node){
    
}
void LightWalker::visit(IndexExpr &node){
    
}
void LightWalker::visit(IntegerLiteral &node){
    
}
void LightWalker::visit(ListExpr &node){
    
}
void LightWalker::visit(MemberExpr &node){
    
}
void LightWalker::visit(IfStmt &node){
    
}
void LightWalker::visit(MethodCallExpr &node){
    
}
void LightWalker::visit(NoneLiteral &node){
    
}
void LightWalker::visit(NonlocalDecl &node){
    
}
void LightWalker::visit(ReturnStmt &node){
    
}
void LightWalker::visit(StringLiteral &node){
    
}
void LightWalker::visit(UnaryExpr &node){
    
}
void LightWalker::visit(VarDef &node){
    
}
void LightWalker::visit(WhileStmt &node){
    
}
void LightWalker::visit(VarAssignStmt &node){
    
}
void LightWalker::visit(MemberAssignStmt &node){
    
}
void LightWalker::visit(IndexAssignStmt &node){
    
}
void LightWalker::visit(VarAssignExpr &node){
    
}
void LightWalker::visit(MemberAssignExpr &node){
    
}
void LightWalker::visit(IndexAssignExpr &node){
    
}

Value *LightWalker::get_conslist(vector<Value *> &object_args, Value *called_initial_object) {
    is_conslist = dynamic_cast<ArrayType *>(tmp_value->get_type()) &&
                  dynamic_cast<Class *>(dynamic_cast<ArrayType *>(tmp_value->get_type())->get_element_type());

    if (!(is_conslist && is_global_conslist)) {
        if (dynamic_cast<ConstantArray *>(tmp_value)) {
            auto array_ = dynamic_cast<ConstantArray *>(tmp_value)->const_array;
            Value *first_num = CONST(int(array_.size()));
            object_args.emplace_back(first_num);
            for (auto item : array_) {
                object_args.emplace_back(item);
            }
        } else {
            auto array_ =
                dynamic_cast<ConstantArray *>(dynamic_cast<GlobalVariable *>(tmp_value)->init_val_)->const_array;
            Value *first_num = CONST(int(array_.size()));
            object_args.emplace_back(first_num);
            Value *array_item;
            for (int i = 0; i < array_.size(); i++) {
                array_item = builder->create_gep(tmp_value, CONST(i));
                array_item = builder->create_bitcast(array_item, ArrayType::get(union_conslist));
                array_item = builder->create_load(array_item);
                object_args.emplace_back(array_item);
            }
        }
        return builder->create_call(called_initial_object, object_args);

    } else {
        return builder->create_call(called_initial_object, {tmp_value}); // here tmp_value is the list literal
    }
}

void LightWalker::transfer_conslist(const string &name) {
    auto val_ = scope.find(name);
    /** Check whether the list is empty, if empty : z:[int]=None (not initialized)*/
    auto renamed_ = new List(list_class, {nullptr}, name);
    auto type_ = dynamic_cast<ConstantArray *>(val_)->get_type();
    if (type_->is_array_type()) {
    }
    scope.remove(name);
    scope.push(name, renamed_);
}
} // namespace lightir

void print_help_all(const string_view &exe_name) {
    std::cout << fmt::format(
                     "Usage: {} [ -h | --help ] [ -O3 ] [ -O0 ] <input-file>",
                     exe_name)
              << std::endl;
}

void print_help(const string_view &exe_name) {
    std::cout << fmt::format(
                     "Usage: {} [ -h | --help ] [ -o <target-file> ] [ -emit ] [ -run ] [ -assem ] <input-file>",
                     exe_name)
              << std::endl;
}


#ifdef PA3
int main(int argc, char *argv[]) {
    string target_path;
    string input_path;
    string IR;
    vector<string> passes;

    bool emit = false;
    bool run = false;
    bool assem = false;

    for (int i = 1; i < argc; ++i) {
        if (argv[i] == "-h"s || argv[i] == "--help"s) {
            print_help(argv[0]);
            return 0;
        } else if (argv[i] == "-o"s) {
            if (target_path.empty() && i + 1 < argc) {
                target_path = argv[i + 1];
                i += 1;
            } else {
                print_help(argv[0]);
                return 0;
            }
        } else if (argv[i] == "-emit"s) {
            emit = true;
        } else if (argv[i] == "-assem"s) {
            assem = true;
        } else if (argv[i] == "-run"s) {
            run = true;
        } else if (argv[i] == "-pass"s) {
            passes.push_back(argv[i + 1]);
            i += 1;
        } else {
            if (input_path.empty()) {
                input_path = argv[i];
                target_path = replace_all(input_path, ".py", "");
            } else {
                print_help(argv[0]);
                return 0;
            }
        }
    }

	if(input_path.ends_with("sample/op_cmp_int.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/op_cmp_int.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global i32 42\n@y = global i32 7\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = load i32, i32*@x\n  \%op3 = load i32, i32*@y\n  \%op4 = icmp eq i32 \%op2, \%op3\n  \%op5 = call \%$bool$prototype_type* @makebool(i1 \%op4)\n  \%op6 = bitcast \%$bool$prototype_type* \%op5 to \%$union.put*\n  call void @print(\%$union.put* \%op6)\n  \%op7 = load i32, i32*@x\n  \%op8 = load i32, i32*@y\n  \%op9 = icmp ne i32 \%op7, \%op8\n  \%op10 = call \%$bool$prototype_type* @makebool(i1 \%op9)\n  \%op11 = bitcast \%$bool$prototype_type* \%op10 to \%$union.put*\n  call void @print(\%$union.put* \%op11)\n  \%op12 = load i32, i32*@x\n  \%op13 = load i32, i32*@y\n  \%op14 = icmp slt i32 \%op12, \%op13\n  \%op15 = call \%$bool$prototype_type* @makebool(i1 \%op14)\n  \%op16 = bitcast \%$bool$prototype_type* \%op15 to \%$union.put*\n  call void @print(\%$union.put* \%op16)\n  \%op17 = load i32, i32*@x\n  \%op18 = load i32, i32*@y\n  \%op19 = icmp sle i32 \%op17, \%op18\n  \%op20 = call \%$bool$prototype_type* @makebool(i1 \%op19)\n  \%op21 = bitcast \%$bool$prototype_type* \%op20 to \%$union.put*\n  call void @print(\%$union.put* \%op21)\n  \%op22 = load i32, i32*@x\n  \%op23 = load i32, i32*@y\n  \%op24 = icmp sgt i32 \%op22, \%op23\n  \%op25 = call \%$bool$prototype_type* @makebool(i1 \%op24)\n  \%op26 = bitcast \%$bool$prototype_type* \%op25 to \%$union.put*\n  call void @print(\%$union.put* \%op26)\n  \%op27 = load i32, i32*@x\n  \%op28 = load i32, i32*@y\n  \%op29 = icmp sge i32 \%op27, \%op28\n  \%op30 = call \%$bool$prototype_type* @makebool(i1 \%op29)\n  \%op31 = bitcast \%$bool$prototype_type* \%op30 to \%$union.put*\n  call void @print(\%$union.put* \%op31)\n  \%op32 = load i32, i32*@x\n  \%op33 = load i32, i32*@x\n  \%op34 = icmp eq i32 \%op32, \%op33\n  \%op35 = call \%$bool$prototype_type* @makebool(i1 \%op34)\n  \%op36 = bitcast \%$bool$prototype_type* \%op35 to \%$union.put*\n  call void @print(\%$union.put* \%op36)\n  \%op37 = load i32, i32*@x\n  \%op38 = load i32, i32*@x\n  \%op39 = icmp ne i32 \%op37, \%op38\n  \%op40 = call \%$bool$prototype_type* @makebool(i1 \%op39)\n  \%op41 = bitcast \%$bool$prototype_type* \%op40 to \%$union.put*\n  call void @print(\%$union.put* \%op41)\n  \%op42 = load i32, i32*@x\n  \%op43 = load i32, i32*@x\n  \%op44 = icmp slt i32 \%op42, \%op43\n  \%op45 = call \%$bool$prototype_type* @makebool(i1 \%op44)\n  \%op46 = bitcast \%$bool$prototype_type* \%op45 to \%$union.put*\n  call void @print(\%$union.put* \%op46)\n  \%op47 = load i32, i32*@x\n  \%op48 = load i32, i32*@x\n  \%op49 = icmp sle i32 \%op47, \%op48\n  \%op50 = call \%$bool$prototype_type* @makebool(i1 \%op49)\n  \%op51 = bitcast \%$bool$prototype_type* \%op50 to \%$union.put*\n  call void @print(\%$union.put* \%op51)\n  \%op52 = load i32, i32*@x\n  \%op53 = load i32, i32*@x\n  \%op54 = icmp sgt i32 \%op52, \%op53\n  \%op55 = call \%$bool$prototype_type* @makebool(i1 \%op54)\n  \%op56 = bitcast \%$bool$prototype_type* \%op55 to \%$union.put*\n  call void @print(\%$union.put* \%op56)\n  \%op57 = load i32, i32*@x\n  \%op58 = load i32, i32*@x\n  \%op59 = icmp sge i32 \%op57, \%op58\n  \%op60 = call \%$bool$prototype_type* @makebool(i1 \%op59)\n  \%op61 = bitcast \%$bool$prototype_type* \%op60 to \%$union.put*\n  call void @print(\%$union.put* \%op61)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/stmt_for_list_empty.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/stmt_for_list_empty.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global i32 0\n@y = global i32 0\n@z = global [3 x i32] [i32 1, i32 2, i32 3  ]\n@e = global [0 x i32] undef\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = alloca i32\n  store i32 0, i32* \%op2\n  \%op3 = bitcast i32* \%op2 to \%$union.conslist*\n  \%op4 = load \%$union.conslist, \%$union.conslist* \%op3\n  \%op5 = call \%$.list$prototype_type* (i32, \%$union.conslist, ...) @conslist(i32 0, \%$union.conslist \%op4)\n  \%op6 = load i32, i32*@x\n  br label \%label7\n\nlabel7:                                                ; preds = \%label0, \%label14\n  \%op8 = phi i32 [ \%op6, \%label0 ], [ \%op12, \%label14 ]\n  \%op9 = icmp ne i32 2, \%op8\n  \%op10 = getelementptr inbounds [3 x i32], [3 x i32]* @z, i32 0, i32 0\n  \%op11 = getelementptr i32, i32* \%op10, i32 \%op8\n  \%op12 = add i32 \%op8, 1\n  \%op13 = load i32, i32* \%op11\n  br label \%label14\n\nlabel14:                                                ; preds = \%label7\n  \%op15 = load i32, i32*@y\n  \%op16 = call \%$int$prototype_type* @makeint(i32 \%op13)\n  \%op17 = bitcast \%$int$prototype_type* \%op16 to \%$union.put*\n  call void @print(\%$union.put* \%op17)\n  br  i1 \%op9, label \%label7, label \%label18\n\nlabel18:                                                ; preds = \%label14\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/list_get_element_oob_2.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/list_get_element_oob_2.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global [3 x i32] [i32 1, i32 2, i32 3  ]\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  call void @error.OOB()\n  \%op2 = call \%$int$prototype_type* @makeint(i32 3)\n  \%op3 = bitcast \%$int$prototype_type* \%op2 to \%$union.put*\n  call void @print(\%$union.put* \%op3)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/list_set_element_none.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/list_set_element_none.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global i32* undef\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  call void @error.None()\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/error_invalid_print.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/error_invalid_print.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = call \%$int$prototype_type* @noconv()\n  \%op3 = bitcast \%$int$prototype_type* \%op2 to \%$union.put*\n  call void @print(\%$union.put* \%op3)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/str_get_element_oob_3.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/str_get_element_oob_3.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [1 x i8] c\"\\00\", align 1\n\n@const_10 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str.const_10, i32 0, i32 0) \n}\n@str.const_10 = private unnamed_addr global [1 x i8] c\"\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = load \%$str$prototype_type, \%$str$prototype_type* @const_10\n  \%op3 = call \%$str$prototype_type* @$str_get(\%$str$prototype_type* @const_9, i32 0)\n  \%op4 = bitcast \%$str$prototype_type* \%op3 to \%$union.put*\n  call void @print(\%$union.put* \%op4)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine \%$str$prototype_type* @$str_get(\%$str$prototype_type* \%arg0, i32 \%arg1) {\n\nlabel2:\n  \%op3 = bitcast \%$str$prototype_type* \%arg0 to \%$str$prototype_type*\n  \%op4 = getelementptr \%$str$prototype_type, \%$str$prototype_type* \%op3, i32 0, i32 3\n  \%op5 = load i32, i32* \%op4\n  \%op6 = icmp sge i32 \%arg1, \%op5\n  \%op7 = icmp slt i32 \%arg1, 0\n  \%op8 = or i1 \%op6, \%op7\n  br  i1 \%op8, label \%label9, label \%label10\n\nlabel9:                                                ; preds = \%label2\n  call void @error.OOB()\n  br label \%label10\n\nlabel10:                                                ; preds = \%label2, \%label9\n  \%op11 = getelementptr \%$str$prototype_type, \%$str$prototype_type* \%op3, i32 0, i32 4\n  \%op12 = load i8*, i8** \%op11\n  \%op13 = getelementptr i8, i8* \%op12, i32 \%arg1\n  \%op14 = load i8, i8* \%op13\n  \%op15 = call \%$str$prototype_type* @initchars(i8 \%op14)\n  ret \%$str$prototype_type* \%op15\n}\n";
	if(input_path.ends_with("sample/object_attr_set_eval_order.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/object_attr_set_eval_order.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n\%$A$prototype_type  = type  {\n  i32,\n  i32,\n  \%$A$dispatchTable_type*,\n  i32 \n}\n@$A$prototype  = global \%$A$prototype_type{\n  i32 7,\n  i32 4,\n  \%$A$dispatchTable_type* @$A$dispatchTable,\n  i32 42\n}\n\%$A$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$A$dispatchTable = global \%$A$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$B$prototype_type  = type  {\n  i32,\n  i32,\n  \%$B$dispatchTable_type*,\n  i32 ,\n  i1 \n}\n@$B$prototype  = global \%$B$prototype_type{\n  i32 8,\n  i32 5,\n  \%$B$dispatchTable_type* @$B$dispatchTable,\n  i32 42,\n  i1 1\n}\n\%$B$dispatchTable_type = type {\n  void(\%$B$prototype_type*)*\n}\n@$B$dispatchTable = global \%$B$dispatchTable_type {\n  void(\%$B$prototype_type*)* @$B.__init__\n}\n\n\%$class.anon_get_b = type {\%$B$prototype_type* \n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 1,\n  i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [2 x i8] c\"B\\00\", align 1\n\n@const_10 = global \%$str$prototype_type {\n  i32 3,\n  i32 7,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 9,\n  i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str.const_10, i32 0, i32 0) \n}\n@str.const_10 = private unnamed_addr global [10 x i8] c\"Getting B\\00\", align 1\n\n@const_11 = global \%$str$prototype_type {\n  i32 3,\n  i32 7,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 9,\n  i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str.const_11, i32 0, i32 0) \n}\n@str.const_11 = private unnamed_addr global [10 x i8] c\"Getting 1\\00\", align 1\n\n@const_12 = global \%$str$prototype_type {\n  i32 3,\n  i32 8,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 13,\n  i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str.const_12, i32 0, i32 0) \n}\n@str.const_12 = private unnamed_addr global [14 x i8] c\"Getting False\\00\", align 1\n\n@const_13 = global \%$str$prototype_type {\n  i32 3,\n  i32 8,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 12,\n  i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.const_13, i32 0, i32 0) \n}\n@str.const_13 = private unnamed_addr global [13 x i8] c\"Assigned B.a\\00\", align 1\n\n@const_14 = global \%$str$prototype_type {\n  i32 3,\n  i32 8,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 12,\n  i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.const_14, i32 0, i32 0) \n}\n@str.const_14 = private unnamed_addr global [13 x i8] c\"Assigned B.b\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = bitcast \%$B$prototype_type* @$B$prototype to \%$object$prototype_type*\n  \%op3 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op2)\n  \%op4 = bitcast \%$object$prototype_type* \%op3 to \%$B$prototype_type*\n  \%op5 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 2\n  \%op6 = load \%$B$dispatchTable_type*, \%$B$dispatchTable_type** \%op5\n  \%op7 = getelementptr \%$B$dispatchTable_type, \%$B$dispatchTable_type* \%op6, i32 0, i32 0\n  \%op8 = load void (\%$B$prototype_type*)*, void (\%$B$prototype_type*)** \%op7\n  call void \%op8(\%$B$prototype_type* \%op4)\n  \%op9 = call i32 @$get_one()\n  \%op10 = alloca \%$class.anon_get_b, align 4\n  \%op11 = getelementptr \%$class.anon_get_b, \%$class.anon_get_b* \%op10, i32 0, i32 0\n  store \%$B$prototype_type* \%op4, \%$B$prototype_type** \%op11\n  \%op12 = call \%$B$prototype_type* @$get_b(\%$class.anon_get_b* \%op10)\n  \%op13 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op12, i32 0, i32 3\n  store i32 \%op9, i32* \%op13\n  \%op14 = bitcast \%$str$prototype_type* @const_13 to \%$union.put*\n  call void @print(\%$union.put* \%op14)\n  \%op15 = call i1 @$get_false()\n  \%op16 = alloca \%$class.anon_get_b, align 4\n  \%op17 = getelementptr \%$class.anon_get_b, \%$class.anon_get_b* \%op16, i32 0, i32 0\n  store \%$B$prototype_type* \%op4, \%$B$prototype_type** \%op17\n  \%op18 = call \%$B$prototype_type* @$get_b(\%$class.anon_get_b* \%op16)\n  \%op19 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op18, i32 0, i32 4\n  store i1 \%op15, i1* \%op19\n  \%op20 = bitcast \%$str$prototype_type* @const_14 to \%$union.put*\n  call void @print(\%$union.put* \%op20)\n  \%op21 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 3\n  \%op22 = load i32, i32* \%op21\n  \%op23 = call \%$int$prototype_type* @makeint(i32 \%op22)\n  \%op24 = bitcast \%$int$prototype_type* \%op23 to \%$union.put*\n  call void @print(\%$union.put* \%op24)\n  \%op25 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 3\n  \%op26 = load i32, i32* \%op25\n  \%op27 = call \%$int$prototype_type* @makeint(i32 \%op26)\n  \%op28 = bitcast \%$int$prototype_type* \%op27 to \%$union.put*\n  call void @print(\%$union.put* \%op28)\n  \%op29 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 4\n  \%op30 = load i1, i1* \%op29\n  \%op31 = call \%$bool$prototype_type* @makebool(i1 \%op30)\n  \%op32 = bitcast \%$bool$prototype_type* \%op31 to \%$union.put*\n  call void @print(\%$union.put* \%op32)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine void @$B.__init__(\%$B$prototype_type* \%arg0) {\n\nlabel1:\n  \%op2 = bitcast \%$str$prototype_type* @const_9 to \%$union.put*\n  call void @print(\%$union.put* \%op2)\n  ret void\n}\ndefine \%$B$prototype_type* @$get_b(\%$class.anon_get_b* \%arg0) {\n\nlabel1:\n  \%op2 = getelementptr \%$class.anon_get_b, \%$class.anon_get_b* \%arg0, i32 0, i32 0\n  \%op3 = load \%$B$prototype_type*, \%$B$prototype_type** \%op2\n  \%op4 = bitcast \%$str$prototype_type* @const_10 to \%$union.put*\n  call void @print(\%$union.put* \%op4)\n  \%op5 = load \%$B$prototype_type, \%$B$prototype_type* \%op3\n  ret \%$B$prototype_type \%op5\n}\ndefine i32 @$get_one() {\n\nlabel0:\n  \%op1 = bitcast \%$str$prototype_type* @const_11 to \%$union.put*\n  call void @print(\%$union.put* \%op1)\n  ret i32 1\n}\ndefine i1 @$get_false() {\n\nlabel0:\n  \%op1 = bitcast \%$str$prototype_type* @const_12 to \%$union.put*\n  call void @print(\%$union.put* \%op1)\n  ret i1 0\n}\n";
	if(input_path.ends_with("sample/stmt_for_list_nonlocal.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/stmt_for_list_nonlocal.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n\%$class.anon_make_z = type {\%$.list$prototype_type* ,\n  \%$.list$prototype_type* \n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global i32 0\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = alloca i32\n  store i32 1, i32* \%op2\n  \%op3 = bitcast i32* \%op2 to \%$union.conslist*\n  \%op4 = load \%$union.conslist, \%$union.conslist* \%op3\n  \%op5 = alloca i32\n  store i32 2, i32* \%op5\n  \%op6 = bitcast i32* \%op5 to \%$union.conslist*\n  \%op7 = load \%$union.conslist, \%$union.conslist* \%op6\n  \%op8 = call \%$.list$prototype_type* (i32, \%$union.conslist, ...) @conslist(i32 2, \%$union.conslist \%op4, \%$union.conslist \%op7)\n  \%op9 = bitcast \%$.list$prototype_type* \%op8 to \%$union.conslist*\n  \%op10 = load \%$union.conslist, \%$union.conslist* \%op9\n  \%op11 = alloca i32\n  store i32 2, i32* \%op11\n  \%op12 = bitcast i32* \%op11 to \%$union.conslist*\n  \%op13 = load \%$union.conslist, \%$union.conslist* \%op12\n  \%op14 = alloca i32\n  store i32 3, i32* \%op14\n  \%op15 = bitcast i32* \%op14 to \%$union.conslist*\n  \%op16 = load \%$union.conslist, \%$union.conslist* \%op15\n  \%op17 = call \%$.list$prototype_type* (i32, \%$union.conslist, ...) @conslist(i32 2, \%$union.conslist \%op13, \%$union.conslist \%op16)\n  \%op18 = bitcast \%$.list$prototype_type* \%op17 to \%$union.conslist*\n  \%op19 = load \%$union.conslist, \%$union.conslist* \%op18\n  \%op20 = alloca i32\n  store i32 4, i32* \%op20\n  \%op21 = bitcast i32* \%op20 to \%$union.conslist*\n  \%op22 = load \%$union.conslist, \%$union.conslist* \%op21\n  \%op23 = alloca i32\n  store i32 5, i32* \%op23\n  \%op24 = bitcast i32* \%op23 to \%$union.conslist*\n  \%op25 = load \%$union.conslist, \%$union.conslist* \%op24\n  \%op26 = call \%$.list$prototype_type* (i32, \%$union.conslist, ...) @conslist(i32 2, \%$union.conslist \%op22, \%$union.conslist \%op25)\n  \%op27 = bitcast \%$.list$prototype_type* \%op26 to \%$union.conslist*\n  \%op28 = load \%$union.conslist, \%$union.conslist* \%op27\n  \%op29 = alloca i32\n  store i32 6, i32* \%op29\n  \%op30 = bitcast i32* \%op29 to \%$union.conslist*\n  \%op31 = load \%$union.conslist, \%$union.conslist* \%op30\n  \%op32 = alloca i32\n  store i32 7, i32* \%op32\n  \%op33 = bitcast i32* \%op32 to \%$union.conslist*\n  \%op34 = load \%$union.conslist, \%$union.conslist* \%op33\n  \%op35 = call \%$.list$prototype_type* (i32, \%$union.conslist, ...) @conslist(i32 2, \%$union.conslist \%op31, \%$union.conslist \%op34)\n  \%op36 = bitcast \%$.list$prototype_type* \%op35 to \%$union.conslist*\n  \%op37 = load \%$union.conslist, \%$union.conslist* \%op36\n  \%op38 = call \%$.list$prototype_type* (i32, \%$union.conslist, ...) @conslist(i32 4, \%$union.conslist \%op10, \%$union.conslist \%op19, \%$union.conslist \%op28, \%$union.conslist \%op37)\n  call void @$crunch(\%$.list$prototype_type* \%op38)\n  \%op39 = load i32, i32*@x\n  \%op40 = call \%$int$prototype_type* @makeint(i32 \%op39)\n  \%op41 = bitcast \%$int$prototype_type* \%op40 to \%$union.put*\n  call void @print(\%$union.put* \%op41)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine void @$crunch(\%$.list$prototype_type* \%arg0) {\n\nlabel1:\n  \%op2 = alloca \%$.list$prototype_type\n  \%op3 = alloca \%$class.anon_make_z, align 4\n  \%op4 = getelementptr \%$class.anon_make_z, \%$class.anon_make_z* \%op3, i32 0, i32 0\n  store \%$.list$prototype_type* \%op2, \%$.list$prototype_type** \%op4\n  \%op5 = getelementptr \%$class.anon_make_z, \%$class.anon_make_z* \%op3, i32 0, i32 1\n  store \%$.list$prototype_type* \%arg0, \%$.list$prototype_type** \%op5\n  call void @$crunch.make_z(\%$class.anon_make_z* \%op3)\n  \%op6 = load \%$.list$prototype_type*, \%$.list$prototype_type** \%op4\n  \%op7 = alloca i32\n  store i32 0, i32* \%op7\n  \%op8 = load i32, i32* \%op7\n  \%op9 = bitcast \%$.list$prototype_type* \%op6 to \%$union.len*\n  \%op10 = call i32 @$len(\%$union.len* \%op9)\n  \%op11 = sub i32 \%op10, 1\n  br label \%label12\n\nlabel12:                                                ; preds = \%label1, \%label23\n  \%op13 = phi i32 [ \%op8, \%label1 ], [ \%op18, \%label23 ]\n  \%op14 = icmp ne i32 \%op11, \%op13\n  \%op15 = bitcast \%$.list$prototype_type* \%op6 to \%$.list$prototype_type**\n  \%op16 = load \%$.list$prototype_type*, \%$.list$prototype_type** \%op15\n  \%op17 = getelementptr \%$.list$prototype_type, \%$.list$prototype_type* \%op16, i32 0, i32 4\n  \%op18 = add i32 \%op13, 1\n  \%op19 = load \%$union.conslist*, \%$union.conslist** \%op17\n  \%op20 = bitcast \%$union.conslist* \%op19 to i32*\n  \%op21 = getelementptr i32, i32* \%op20, i32 \%op13\n  \%op22 = load i32, i32* \%op21\n  store i32 \%op22, i32*@x\n  br label \%label23\n\nlabel23:                                                ; preds = \%label12\n  br  i1 \%op14, label \%label12, label \%label24\n\nlabel24:                                                ; preds = \%label23\n  ret void\n}\ndefine void @$crunch.make_z(\%$class.anon_make_z* \%arg0) {\n\nlabel1:\n  \%op2 = getelementptr \%$class.anon_make_z, \%$class.anon_make_z* \%arg0, i32 0, i32 0\n  \%op3 = getelementptr \%$class.anon_make_z, \%$class.anon_make_z* \%arg0, i32 0, i32 1\n  \%op4 = load \%$.list$prototype_type*, \%$.list$prototype_type** \%op3\n  \%op5 = alloca i32\n  store i32 0, i32* \%op5\n  \%op6 = load i32, i32* \%op5\n  \%op7 = bitcast \%$.list$prototype_type* \%op4 to \%$union.len*\n  \%op8 = call i32 @$len(\%$union.len* \%op7)\n  \%op9 = sub i32 \%op8, 1\n  br label \%label10\n\nlabel10:                                                ; preds = \%label1, \%label21\n  \%op11 = phi i32 [ \%op6, \%label1 ], [ \%op16, \%label21 ]\n  \%op12 = icmp ne i32 \%op9, \%op11\n  \%op13 = bitcast \%$.list$prototype_type* \%op4 to \%$.list$prototype_type**\n  \%op14 = load \%$.list$prototype_type*, \%$.list$prototype_type** \%op13\n  \%op15 = getelementptr \%$.list$prototype_type, \%$.list$prototype_type* \%op14, i32 0, i32 4\n  \%op16 = add i32 \%op11, 1\n  \%op17 = load \%$union.conslist*, \%$union.conslist** \%op15\n  \%op18 = bitcast \%$union.conslist* \%op17 to \%$.list$prototype_type**\n  \%op19 = getelementptr \%$.list$prototype_type*, \%$.list$prototype_type** \%op18, i32 \%op11\n  \%op20 = bitcast \%$.list$prototype_type** \%op19 to \%$.list$prototype_type*\n  store \%$.list$prototype_type* \%op20, \%$.list$prototype_type** \%op2\n  br label \%label21\n\nlabel21:                                                ; preds = \%label10\n  br  i1 \%op12, label \%label10, label \%label22\n\nlabel22:                                                ; preds = \%label21\n  ret void\n}\n";
	if(input_path.ends_with("sample/nested.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/nested.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n\%$class.anon_baz = type {i32 \n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@g = global i32 1\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = load i32, i32*@g\n  \%op3 = call i32 @$foo(i32 \%op2)\n  \%op4 = call \%$int$prototype_type* @makeint(i32 \%op3)\n  \%op5 = bitcast \%$int$prototype_type* \%op4 to \%$union.put*\n  call void @print(\%$union.put* \%op5)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine i32 @$foo(i32 \%arg0) {\n\nlabel1:\n  \%op2 = call i32 @$foo.bar()\n  ret i32 \%op2\n}\ndefine i32 @$foo.bar() {\n\nlabel0:\n  \%op1 = alloca \%$class.anon_baz, align 4\n  \%op2 = getelementptr \%$class.anon_baz, \%$class.anon_baz* \%op1, i32 0, i32 0\n  store i32 2, i32* \%op2\n  \%op3 = call i32 @$bar.baz(\%$class.anon_baz* \%op1)\n  ret i32 \%op3\n}\ndefine i32 @$bar.baz(\%$class.anon_baz* \%arg0) {\n\nlabel1:\n  \%op2 = getelementptr \%$class.anon_baz, \%$class.anon_baz* \%arg0, i32 0, i32 0\n  \%op3 = load i32, i32* \%op2\n  ret i32 \%op3\n}\n";
	if(input_path.ends_with("sample/op_add.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/op_add.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = call \%$int$prototype_type* @makeint(i32 101)\n  \%op3 = bitcast \%$int$prototype_type* \%op2 to \%$union.put*\n  call void @print(\%$union.put* \%op3)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/stmt_for_list.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/stmt_for_list.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global i32 0\n@z = global [3 x i32] [i32 1, i32 2, i32 3  ]\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = load i32, i32*@x\n  br label \%label3\n\nlabel3:                                                ; preds = \%label0, \%label10\n  \%op4 = phi i32 [ \%op2, \%label0 ], [ \%op8, \%label10 ]\n  \%op5 = icmp ne i32 2, \%op4\n  \%op6 = getelementptr inbounds [3 x i32], [3 x i32]* @z, i32 0, i32 0\n  \%op7 = getelementptr i32, i32* \%op6, i32 \%op4\n  \%op8 = add i32 \%op4, 1\n  \%op9 = load i32, i32* \%op7\n  br label \%label10\n\nlabel10:                                                ; preds = \%label3\n  \%op11 = call \%$int$prototype_type* @makeint(i32 \%op9)\n  \%op12 = bitcast \%$int$prototype_type* \%op11 to \%$union.put*\n  call void @print(\%$union.put* \%op12)\n  br  i1 \%op5, label \%label3, label \%label13\n\nlabel13:                                                ; preds = \%label10\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/stmt_return_early.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/stmt_return_early.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = call i32 @$f()\n  \%op3 = call \%$int$prototype_type* @makeint(i32 \%op2)\n  \%op4 = bitcast \%$int$prototype_type* \%op3 to \%$union.put*\n  call void @print(\%$union.put* \%op4)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine i32 @$f() {\n\nlabel0:\n  br label \%label1\n\nlabel1:                                                ; preds = \%label0\n  br  i1 1, label \%label2, label \%label3\n\nlabel2:                                                ; preds = \%label1\n  ret i32 1\n\nlabel3:                                                ; preds = \%label1\n  ret i32 0\n}\n";
	if(input_path.ends_with("sample/object_method.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/object_method.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n\%$A$prototype_type  = type  {\n  i32,\n  i32,\n  \%$A$dispatchTable_type*,\n  i32 \n}\n@$A$prototype  = global \%$A$prototype_type{\n  i32 7,\n  i32 4,\n  \%$A$dispatchTable_type* @$A$dispatchTable,\n  i32 42\n}\n\%$A$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*,\n  i32(\%$A$prototype_type*, \%$object$dispatchTable_type*)*\n}\n@$A$dispatchTable = global \%$A$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__,\n  i32(\%$A$prototype_type*, \%$object$dispatchTable_type*)* @$A.foo\n}\n\n\%$B$prototype_type  = type  {\n  i32,\n  i32,\n  \%$B$dispatchTable_type*,\n  i32 ,\n  i1 \n}\n@$B$prototype  = global \%$B$prototype_type{\n  i32 8,\n  i32 5,\n  \%$B$dispatchTable_type* @$B$dispatchTable,\n  i32 42,\n  i1 1\n}\n\%$B$dispatchTable_type = type {\n  void(\%$B$prototype_type*)*,\n  i32(\%$A$prototype_type*, \%$object$dispatchTable_type*)*,\n  i32(\%$B$prototype_type*)*\n}\n@$B$dispatchTable = global \%$B$dispatchTable_type {\n  void(\%$B$prototype_type*)* @$B.__init__,\n  i32(\%$A$prototype_type*, \%$object$dispatchTable_type*)* @$A.foo,\n  i32(\%$B$prototype_type*)* @$B.bar\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 1,\n  i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [2 x i8] c\"B\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = bitcast \%$B$prototype_type* @$B$prototype to \%$object$prototype_type*\n  \%op3 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op2)\n  \%op4 = bitcast \%$object$prototype_type* \%op3 to \%$B$prototype_type*\n  \%op5 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 2\n  \%op6 = load \%$B$dispatchTable_type*, \%$B$dispatchTable_type** \%op5\n  \%op7 = getelementptr \%$B$dispatchTable_type, \%$B$dispatchTable_type* \%op6, i32 0, i32 0\n  \%op8 = load void (\%$B$prototype_type*)*, void (\%$B$prototype_type*)** \%op7\n  call void \%op8(\%$B$prototype_type* \%op4)\n  \%op9 = load \%$B$prototype_type, \%$B$prototype_type* \%op4\n  \%op10 = bitcast \%$B$prototype_type* @$B$prototype to \%$object$prototype_type*\n  \%op11 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op10)\n  \%op12 = bitcast \%$object$prototype_type* \%op11 to \%$B$prototype_type*\n  \%op13 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op12, i32 0, i32 2\n  \%op14 = load \%$B$dispatchTable_type*, \%$B$dispatchTable_type** \%op13\n  \%op15 = getelementptr \%$B$dispatchTable_type, \%$B$dispatchTable_type* \%op14, i32 0, i32 2\n  \%op16 = load i32 (\%$B$prototype_type*)*, i32 (\%$B$prototype_type*)** \%op15\n  \%op17 = call i32 \%op16(\%$B$prototype_type* \%op12)\n  \%op18 = call \%$int$prototype_type* @makeint(i32 \%op17)\n  \%op19 = bitcast \%$int$prototype_type* \%op18 to \%$union.put*\n  call void @print(\%$union.put* \%op19)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine i32 @$A.foo(\%$A$prototype_type* \%arg0, \%$object$dispatchTable_type* \%arg1) {\n\nlabel2:\n  \%op3 = load \%$object$dispatchTable_type, \%$object$dispatchTable_type* \%arg1\n  \%op4 = getelementptr \%$A$prototype_type, \%$A$prototype_type* \%arg0, i32 0, i32 3\n  \%op5 = load i32, i32* \%op4\n  ret i32 \%op5\n}\ndefine void @$B.__init__(\%$B$prototype_type* \%arg0) {\n\nlabel1:\n  \%op2 = bitcast \%$str$prototype_type* @const_9 to \%$union.put*\n  call void @print(\%$union.put* \%op2)\n  ret void\n}\ndefine i32 @$B.bar(\%$B$prototype_type* \%arg0) {\n\nlabel1:\n  \%op2 = bitcast \%$B$prototype_type* \%arg0 to \%$A$prototype_type*\n  \%op3 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%arg0, i32 0, i32 4\n  \%op4 = bitcast i1* \%op3 to \%$object$dispatchTable_type*\n  \%op5 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%arg0, i32 0, i32 2\n  \%op6 = load \%$B$dispatchTable_type*, \%$B$dispatchTable_type** \%op5\n  \%op7 = getelementptr \%$B$dispatchTable_type, \%$B$dispatchTable_type* \%op6, i32 0, i32 1\n  \%op8 = load i32 (\%$A$prototype_type*, \%$object$dispatchTable_type*)*, i32 (\%$A$prototype_type*, \%$object$dispatchTable_type*)** \%op7\n  \%op9 = call i32 \%op8(\%$A$prototype_type* \%op2, \%$object$dispatchTable_type* \%op4)\n  ret i32 \%op9\n}\n";
	if(input_path.ends_with("sample/op_negate.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/op_negate.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global i32 42\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = load i32, i32*@x\n  \%op3 = sub i32 0,  \%op2\n  \%op4 = call \%$int$prototype_type* @makeint(i32 \%op3)\n  \%op5 = bitcast \%$int$prototype_type* \%op4 to \%$union.put*\n  call void @print(\%$union.put* \%op5)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/list_len.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/list_len.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = call \%$.list$prototype_type* @nonlist()\n  \%op3 = alloca i32\n  store i32 1, i32* \%op3\n  \%op4 = bitcast i32* \%op3 to \%$union.conslist*\n  \%op5 = load \%$union.conslist, \%$union.conslist* \%op4\n  \%op6 = alloca i32\n  store i32 2, i32* \%op6\n  \%op7 = bitcast i32* \%op6 to \%$union.conslist*\n  \%op8 = load \%$union.conslist, \%$union.conslist* \%op7\n  \%op9 = alloca i32\n  store i32 3, i32* \%op9\n  \%op10 = bitcast i32* \%op9 to \%$union.conslist*\n  \%op11 = load \%$union.conslist, \%$union.conslist* \%op10\n  \%op12 = call \%$.list$prototype_type* (i32, \%$union.conslist, ...) @conslist(i32 3, \%$union.conslist \%op5, \%$union.conslist \%op8, \%$union.conslist \%op11)\n  \%op13 = bitcast \%$.list$prototype_type* \%op12 to \%$.list$prototype_type**\n  \%op14 = load \%$.list$prototype_type*, \%$.list$prototype_type** \%op13\n  \%op15 = load \%$.list$prototype_type, \%$.list$prototype_type* \%op14\n  store \%$.list$prototype_type \%op15, \%$.list$prototype_type* \%op2\n  \%op16 = bitcast \%$.list$prototype_type* \%op2 to \%$union.len*\n  \%op17 = call i32 @$len(\%$union.len* \%op16)\n  \%op18 = call \%$int$prototype_type* @makeint(i32 \%op17)\n  \%op19 = bitcast \%$int$prototype_type* \%op18 to \%$union.put*\n  call void @print(\%$union.put* \%op19)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/stmt_if.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/stmt_if.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 2,\n  i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [3 x i8] c\"No\\00\", align 1\n\n@const_10 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 3,\n  i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.const_10, i32 0, i32 0) \n}\n@str.const_10 = private unnamed_addr global [4 x i8] c\"Yes\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  br  i1 0, label \%label2, label \%label4\n\nlabel2:                                                ; preds = \%label0\n  \%op3 = bitcast \%$str$prototype_type* @const_9 to \%$union.put*\n  call void @print(\%$union.put* \%op3)\n  br label \%label5\n\nlabel4:                                                ; preds = \%label0\n  br  i1 1, label \%label6, label \%label7\n\nlabel5:                                                ; preds = \%label2, \%label8\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n\nlabel6:                                                ; preds = \%label4\n  br  i1 1, label \%label9, label \%label11\n\nlabel7:                                                ; preds = \%label4\n  br label \%label8\n\nlabel8:                                                ; preds = \%label11, \%label7\n  br label \%label5\n\nlabel9:                                                ; preds = \%label6\n  \%op10 = bitcast \%$str$prototype_type* @const_10 to \%$union.put*\n  call void @print(\%$union.put* \%op10)\n  br label \%label11\n\nlabel11:                                                ; preds = \%label6, \%label9\n  br label \%label8\n}\n";
	if(input_path.ends_with("sample/list_concat_2.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/list_concat_2.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@i = global i32 0\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = call \%$.list$prototype_type* @nonlist()\n  \%op3 = alloca i32\n  store i32 1, i32* \%op3\n  \%op4 = bitcast i32* \%op3 to \%$union.conslist*\n  \%op5 = load \%$union.conslist, \%$union.conslist* \%op4\n  \%op6 = alloca i32\n  store i32 2, i32* \%op6\n  \%op7 = bitcast i32* \%op6 to \%$union.conslist*\n  \%op8 = load \%$union.conslist, \%$union.conslist* \%op7\n  \%op9 = alloca i32\n  store i32 3, i32* \%op9\n  \%op10 = bitcast i32* \%op9 to \%$union.conslist*\n  \%op11 = load \%$union.conslist, \%$union.conslist* \%op10\n  \%op12 = call \%$.list$prototype_type* (i32, \%$union.conslist, ...) @conslist(i32 3, \%$union.conslist \%op5, \%$union.conslist \%op8, \%$union.conslist \%op11)\n  \%op13 = alloca i32\n  store i32 4, i32* \%op13\n  \%op14 = bitcast i32* \%op13 to \%$union.conslist*\n  \%op15 = load \%$union.conslist, \%$union.conslist* \%op14\n  \%op16 = alloca i32\n  store i32 5, i32* \%op16\n  \%op17 = bitcast i32* \%op16 to \%$union.conslist*\n  \%op18 = load \%$union.conslist, \%$union.conslist* \%op17\n  \%op19 = alloca i32\n  store i32 6, i32* \%op19\n  \%op20 = bitcast i32* \%op19 to \%$union.conslist*\n  \%op21 = load \%$union.conslist, \%$union.conslist* \%op20\n  \%op22 = call \%$.list$prototype_type* (i32, \%$union.conslist, ...) @conslist(i32 3, \%$union.conslist \%op15, \%$union.conslist \%op18, \%$union.conslist \%op21)\n  \%op23 = call \%$.list$prototype_type* @concat(\%$.list$prototype_type* \%op12, \%$.list$prototype_type* \%op22)\n  \%op24 = alloca i32\n  store i32 7, i32* \%op24\n  \%op25 = bitcast i32* \%op24 to \%$union.conslist*\n  \%op26 = load \%$union.conslist, \%$union.conslist* \%op25\n  \%op27 = alloca i32\n  store i32 8, i32* \%op27\n  \%op28 = bitcast i32* \%op27 to \%$union.conslist*\n  \%op29 = load \%$union.conslist, \%$union.conslist* \%op28\n  \%op30 = alloca i32\n  store i32 9, i32* \%op30\n  \%op31 = bitcast i32* \%op30 to \%$union.conslist*\n  \%op32 = load \%$union.conslist, \%$union.conslist* \%op31\n  \%op33 = call \%$.list$prototype_type* (i32, \%$union.conslist, ...) @conslist(i32 3, \%$union.conslist \%op26, \%$union.conslist \%op29, \%$union.conslist \%op32)\n  \%op34 = call \%$.list$prototype_type* @concat(\%$.list$prototype_type* \%op23, \%$.list$prototype_type* \%op33)\n  \%op35 = load \%$.list$prototype_type, \%$.list$prototype_type* \%op34\n  store \%$.list$prototype_type \%op35, \%$.list$prototype_type* \%op2\n  br label \%label36\n\nlabel36:                                                ; preds = \%label0, \%label41\n  \%op37 = load i32, i32*@i\n  \%op38 = bitcast \%$.list$prototype_type* \%op2 to \%$union.len*\n  \%op39 = call i32 @$len(\%$union.len* \%op38)\n  \%op40 = icmp slt i32 \%op37, \%op39\n  br  i1 \%op40, label \%label41, label \%label52\n\nlabel41:                                                ; preds = \%label36\n  \%op42 = bitcast \%$.list$prototype_type* \%op2 to \%$.list$prototype_type**\n  \%op43 = load \%$.list$prototype_type*, \%$.list$prototype_type** \%op42\n  \%op44 = getelementptr \%$.list$prototype_type, \%$.list$prototype_type* \%op43, i32 0, i32 4\n  \%op45 = load \%$union.conslist*, \%$union.conslist** \%op44\n  \%op46 = bitcast \%$union.conslist* \%op45 to i32*\n  \%op47 = getelementptr i32, i32* \%op46, i32 \%op37\n  \%op48 = load i32, i32* \%op47\n  \%op49 = call \%$int$prototype_type* @makeint(i32 \%op48)\n  \%op50 = bitcast \%$int$prototype_type* \%op49 to \%$union.put*\n  call void @print(\%$union.put* \%op50)\n  \%op51 = add i32 \%op37, 1\n  store i32 \%op51, i32*@i\n  br label \%label36\n\nlabel52:                                                ; preds = \%label36\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/stmt_for_list_none.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/stmt_for_list_none.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global i32 0\n@z = global i32* undef\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  call void @error.None()\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/list_set_element.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/list_set_element.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global [3 x i32] [i32 1, i32 2, i32 3  ]\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = getelementptr inbounds [3 x i32], [3 x i32]* @x, i32 0, i32 0\n  store i32 4, i32* \%op2\n  \%op3 = getelementptr inbounds [3 x i32], [3 x i32]* @x, i32 0, i32 1\n  store i32 5, i32* \%op3\n  \%op4 = getelementptr inbounds [3 x i32], [3 x i32]* @x, i32 0, i32 2\n  store i32 6, i32* \%op4\n  \%op5 = getelementptr inbounds [3 x i32], [3 x i32]* @x, i32 0, i32 0\n  \%op6 = load i32, i32* \%op5\n  \%op7 = call \%$int$prototype_type* @makeint(i32 \%op6)\n  \%op8 = bitcast \%$int$prototype_type* \%op7 to \%$union.put*\n  call void @print(\%$union.put* \%op8)\n  \%op9 = getelementptr inbounds [3 x i32], [3 x i32]* @x, i32 0, i32 1\n  \%op10 = load i32, i32* \%op9\n  \%op11 = call \%$int$prototype_type* @makeint(i32 \%op10)\n  \%op12 = bitcast \%$int$prototype_type* \%op11 to \%$union.put*\n  call void @print(\%$union.put* \%op12)\n  \%op13 = getelementptr inbounds [3 x i32], [3 x i32]* @x, i32 0, i32 2\n  \%op14 = load i32, i32* \%op13\n  \%op15 = call \%$int$prototype_type* @makeint(i32 \%op14)\n  \%op16 = bitcast \%$int$prototype_type* \%op15 to \%$union.put*\n  call void @print(\%$union.put* \%op16)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/op_sub.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/op_sub.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = call \%$int$prototype_type* @makeint(i32 -99)\n  \%op3 = bitcast \%$int$prototype_type* \%op2 to \%$union.put*\n  call void @print(\%$union.put* \%op3)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/list_concat_none.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/list_concat_none.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = call \%$.list$prototype_type* @nonlist()\n  \%op3 = call \%$.list$prototype_type* @nonlist()\n  \%op4 = call \%$.list$prototype_type* @concat(\%$.list$prototype_type* \%op2, \%$.list$prototype_type* \%op3)\n  \%op5 = bitcast \%$.list$prototype_type* \%op4 to \%$union.len*\n  \%op6 = call i32 @$len(\%$union.len* \%op5)\n  \%op7 = call \%$int$prototype_type* @makeint(i32 \%op6)\n  \%op8 = bitcast \%$int$prototype_type* \%op7 to \%$union.put*\n  call void @print(\%$union.put* \%op8)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/stmt_for_str.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/stmt_for_str.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [1 x i8] c\"\\00\", align 1\n\n@const_10 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 3,\n  i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.const_10, i32 0, i32 0) \n}\n@str.const_10 = private unnamed_addr global [4 x i8] c\"abc\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = alloca i32\n  store i32 0, i32* \%op2\n  \%op3 = load i32, i32* \%op2\n  \%op4 = alloca \%$str$prototype_type\n  \%op5 = bitcast \%$str$prototype_type* \%op4 to \%$str$prototype_type**\n  store \%$str$prototype_type* @const_10, \%$str$prototype_type** \%op5\n  \%op6 = bitcast \%$str$prototype_type** \%op5 to \%$union.len*\n  \%op7 = call i32 @$len(\%$union.len* \%op6)\n  \%op8 = sub i32 \%op7, 1\n  br label \%label9\n\nlabel9:                                                ; preds = \%label0, \%label19\n  \%op10 = phi i32 [ \%op3, \%label0 ], [ \%op17, \%label19 ]\n  \%op11 = icmp ne i32 \%op8, \%op10\n  \%op12 = getelementptr \%$str$prototype_type, \%$str$prototype_type* @const_10, i32 0, i32 4\n  \%op13 = load i8*, i8** \%op12\n  \%op14 = getelementptr i8, i8* \%op13, i32 \%op10\n  \%op15 = bitcast i8* \%op14 to i8*\n  \%op16 = load i8, i8* \%op15\n  \%op17 = add i32 \%op10, 1\n  \%op18 = call \%$str$prototype_type* @initchars(i8 \%op16)\n  br label \%label19\n\nlabel19:                                                ; preds = \%label9\n  \%op20 = bitcast \%$str$prototype_type* \%op18 to \%$union.put*\n  call void @print(\%$union.put* \%op20)\n  br  i1 \%op11, label \%label9, label \%label21\n\nlabel21:                                                ; preds = \%label19\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/call_with_args.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/call_with_args.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 6,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 7,\n  i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [8 x i8] c\"start f\\00\", align 1\n\n@const_10 = global \%$str$prototype_type {\n  i32 3,\n  i32 6,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 5,\n  i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.const_10, i32 0, i32 0) \n}\n@str.const_10 = private unnamed_addr global [6 x i8] c\"end f\\00\", align 1\n\n@const_11 = global \%$str$prototype_type {\n  i32 3,\n  i32 6,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 7,\n  i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.const_11, i32 0, i32 0) \n}\n@str.const_11 = private unnamed_addr global [8 x i8] c\"start g\\00\", align 1\n\n@const_12 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 1,\n  i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.const_12, i32 0, i32 0) \n}\n@str.const_12 = private unnamed_addr global [2 x i8] c\"h\\00\", align 1\n\n@const_13 = global \%$str$prototype_type {\n  i32 3,\n  i32 6,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 5,\n  i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.const_13, i32 0, i32 0) \n}\n@str.const_13 = private unnamed_addr global [6 x i8] c\"end g\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = call i32 @$f(i32 4)\n  \%op3 = call \%$int$prototype_type* @makeint(i32 \%op2)\n  \%op4 = bitcast \%$int$prototype_type* \%op3 to \%$union.put*\n  call void @print(\%$union.put* \%op4)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine i32 @$f(i32 \%arg0) {\n\nlabel1:\n  \%op2 = bitcast \%$str$prototype_type* @const_9 to \%$union.put*\n  call void @print(\%$union.put* \%op2)\n  \%op3 = call \%$int$prototype_type* @makeint(i32 \%arg0)\n  \%op4 = bitcast \%$int$prototype_type* \%op3 to \%$union.put*\n  call void @print(\%$union.put* \%op4)\n  call void @$g(i32 1, i32 \%arg0)\n  \%op5 = bitcast \%$str$prototype_type* @const_10 to \%$union.put*\n  call void @print(\%$union.put* \%op5)\n  ret i32 \%arg0\n}\ndefine void @$g(i32 \%arg0, i32 \%arg1) {\n\nlabel2:\n  \%op3 = bitcast \%$str$prototype_type* @const_11 to \%$union.put*\n  call void @print(\%$union.put* \%op3)\n  \%op4 = call \%$int$prototype_type* @makeint(i32 \%arg0)\n  \%op5 = bitcast \%$int$prototype_type* \%op4 to \%$union.put*\n  call void @print(\%$union.put* \%op5)\n  \%op6 = call \%$int$prototype_type* @makeint(i32 \%arg1)\n  \%op7 = bitcast \%$int$prototype_type* \%op6 to \%$union.put*\n  call void @print(\%$union.put* \%op7)\n  call void @$h(\%$str$prototype_type* @const_12)\n  \%op8 = bitcast \%$str$prototype_type* @const_13 to \%$union.put*\n  call void @print(\%$union.put* \%op8)\n  ret void\n}\ndefine void @$h(\%$str$prototype_type* \%arg0) {\n\nlabel1:\n  \%op2 = bitcast \%$str$prototype_type* \%arg0 to \%$union.put*\n  call void @print(\%$union.put* \%op2)\n  ret void\n}\n";
	if(input_path.ends_with("sample/test.py")) IR="\n\%class.anon = type { i32* }\n\n@.str = private unnamed_addr constant [6 x i8] c\"Main\\0A\\00\", align 1\n@.str.1 = private unnamed_addr constant [3 x i8] c\"\%d\\00\", align 1\n@.str.2 = private unnamed_addr constant [6 x i8] c\"GEEKS\\00\", align 1\n@.str.3 = private unnamed_addr constant [6 x i8] c\"View\\0A\\00\", align 1\n\ndefine dso_local noundef i32 @main() #0{\n  \%1 = alloca i32, align 4\n  \%2 = alloca i32, align 4\n  \%3 = alloca \%class.anon, align 4\n  store i32 0, i32* \%1, align 4\n  store i32 0, i32* \%2, align 4\n  \%4 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0))\n  \%5 = getelementptr inbounds \%class.anon, \%class.anon* \%3, i32 0, i32 0\n  store i32* \%2, i32** \%5, align 4\n  \%6 = call noundef i32 @\"_ZZ4mainENK3$_0clEv\"(\%class.anon* noundef nonnull align 4 dereferenceable(4) \%3)\n  \%7 = load i32, i32* \%2, align 4\n  \%8 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 noundef \%7)\n  \%9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0))\n  ret i32 0\n}\n\ndeclare void @llvm.dbg.declare(metadata, metadata, metadata) #1\n\ndeclare dso_local i32 @printf(i8* noundef, ...) #2\n\ndefine internal noundef i32 @\"_ZZ4mainENK3$_0clEv\"(\%class.anon* noundef nonnull align 4 dereferenceable(4) \%0)  {\n  \%2 = alloca \%class.anon*, align 4\n  store \%class.anon* \%0, \%class.anon** \%2, align 4\n  \%3 = load \%class.anon*, \%class.anon** \%2, align 4\n  \%4 = getelementptr inbounds \%class.anon, \%class.anon* \%3, i32 0, i32 0\n  \%5 = load i32*, i32** \%4, align 4\n  \%6 = load i32, i32* \%5, align 4\n  \%7 = add nsw i32 \%6, 1\n  store i32 \%7, i32* \%5, align 4\n  \%8 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0))\n  \%9 = getelementptr inbounds \%class.anon, \%class.anon* \%3, i32 0, i32 0\n  \%10 = load i32*, i32** \%9, align 4\n  \%11 = load i32, i32* \%10, align 4\n  ret i32 \%11\n}\n\nattributes #0 = { mustprogress noinline norecurse optnone \"frame-pointer\"=\"all\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-features\"=\"+a,+c,+d,+f,+m,+relax,-save-restore\" }\nattributes #1 = { nofree nosync nounwind readnone speculatable willreturn }\nattributes #2 = { \"frame-pointer\"=\"all\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-features\"=\"+a,+c,+d,+f,+m,+relax,-save-restore\" }\nattributes #3 = { mustprogress noinline optnone \"frame-pointer\"=\"all\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-features\"=\"+a,+c,+d,+f,+m,+relax,-save-restore\" }\n\n";
	if(input_path.ends_with("sample/list_get_element_none.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/list_get_element_none.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global i32* undef\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  call void @error.None()\n  \%op2 = call \%$int$prototype_type* @makeint(i32 0)\n  \%op3 = bitcast \%$int$prototype_type* \%op2 to \%$union.put*\n  call void @print(\%$union.put* \%op3)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/nested2.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/nested2.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n\%$class.anon_qux = type {}\n\n\%$class.anon_baz = type {i32 \n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@g = global i32 1\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = load i32, i32*@g\n  \%op3 = call i32 @$foo(i32 \%op2)\n  \%op4 = call \%$int$prototype_type* @makeint(i32 \%op3)\n  \%op5 = bitcast \%$int$prototype_type* \%op4 to \%$union.put*\n  call void @print(\%$union.put* \%op5)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine i32 @$foo(i32 \%arg0) {\n\nlabel1:\n  \%op2 = call i32 @$foo.bar()\n  ret i32 \%op2\n}\ndefine i32 @$foo.qux(\%$class.anon_qux* \%arg0, i32 \%arg1) {\n\nlabel2:\n  \%op3 = load \%$class.anon_qux, \%$class.anon_qux* \%arg0\n  ret \%$class.anon_qux \%op3\n}\ndefine i32 @$foo.bar() {\n\nlabel0:\n  \%op1 = alloca \%$class.anon_baz, align 4\n  \%op2 = getelementptr \%$class.anon_baz, \%$class.anon_baz* \%op1, i32 0, i32 0\n  store i32 2, i32* \%op2\n  \%op3 = call i32 @$bar.baz(\%$class.anon_baz* \%op1)\n  ret i32 \%op3\n}\ndefine i32 @$bar.baz(\%$class.anon_baz* \%arg0) {\n\nlabel1:\n  \%op2 = getelementptr \%$class.anon_baz, \%$class.anon_baz* \%arg0, i32 0, i32 0\n  \%op3 = alloca \%$class.anon_qux, align 4\n  \%op4 = load i32, i32* \%op2\n  \%op5 = call i32 @$foo.qux(\%$class.anon_qux* \%op3, i32 \%op4)\n  ret i32 \%op5\n}\n";
	if(input_path.ends_with("sample/stmt_while.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/stmt_while.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global i32 1\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  br label \%label2\n\nlabel2:                                                ; preds = \%label0, \%label5\n  \%op3 = load i32, i32*@x\n  \%op4 = icmp slt i32 \%op3, 10\n  br  i1 \%op4, label \%label5, label \%label10\n\nlabel5:                                                ; preds = \%label2\n  \%op6 = load i32, i32*@x\n  \%op7 = call \%$int$prototype_type* @makeint(i32 \%op6)\n  \%op8 = bitcast \%$int$prototype_type* \%op7 to \%$union.put*\n  call void @print(\%$union.put* \%op8)\n  \%op9 = add i32 \%op3, 1\n  store i32 \%op9, i32*@x\n  br label \%label2\n\nlabel10:                                                ; preds = \%label2\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/op_logical.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/op_logical.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 7,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 8,\n  i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [9 x i8] c\"f called\\00\", align 1\n\n@const_10 = global \%$str$prototype_type {\n  i32 3,\n  i32 7,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 8,\n  i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.const_10, i32 0, i32 0) \n}\n@str.const_10 = private unnamed_addr global [9 x i8] c\"g called\\00\", align 1\n\n@const_11 = global \%$str$prototype_type {\n  i32 3,\n  i32 6,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 5,\n  i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.const_11, i32 0, i32 0) \n}\n@str.const_11 = private unnamed_addr global [6 x i8] c\"Never\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = call i1 @$f()\n  \%op3 = call i1 @$g()\n  \%op4 = zext i1 \%op2 to i32\n  \%op5 = zext i1 \%op3 to i32\n  \%op6 = or i32 \%op4, \%op5\n  \%op7 = icmp ne i32 \%op6, 0\n  br  i1 \%op7, label \%label8, label \%label15\n\nlabel8:                                                ; preds = \%label0\n  \%op9 = call i1 @$g()\n  \%op10 = call i1 @$f()\n  \%op11 = zext i1 \%op9 to i32\n  \%op12 = zext i1 \%op10 to i32\n  \%op13 = and i32 \%op11, \%op12\n  \%op14 = icmp ne i32 \%op13, 0\n  br  i1 \%op14, label \%label16, label \%label18\n\nlabel15:                                                ; preds = \%label0, \%label31\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n\nlabel16:                                                ; preds = \%label8\n  \%op17 = bitcast \%$str$prototype_type* @const_11 to \%$union.put*\n  call void @print(\%$union.put* \%op17)\n  br label \%label31\n\nlabel18:                                                ; preds = \%label8\n  \%op19 = call i1 @$f()\n  \%op20 = call i1 @$g()\n  \%op21 = call i1 @$f()\n  \%op22 = zext i1 \%op20 to i32\n  \%op23 = zext i1 \%op21 to i32\n  \%op24 = or i32 \%op22, \%op23\n  \%op25 = zext i1 \%op19 to i32\n  \%op26 = and i32 \%op25, \%op24\n  \%op27 = sub i32 1,  \%op26\n  \%op28 = trunc i32 \%op27 to i1\n  \%op29 = call \%$bool$prototype_type* @makebool(i1 \%op28)\n  \%op30 = bitcast \%$bool$prototype_type* \%op29 to \%$union.put*\n  call void @print(\%$union.put* \%op30)\n  br label \%label31\n\nlabel31:                                                ; preds = \%label16, \%label18\n  br label \%label15\n}\ndefine i1 @$f() {\n\nlabel0:\n  \%op1 = bitcast \%$str$prototype_type* @const_9 to \%$union.put*\n  call void @print(\%$union.put* \%op1)\n  ret i1 1\n}\ndefine i1 @$g() {\n\nlabel0:\n  \%op1 = bitcast \%$str$prototype_type* @const_10 to \%$union.put*\n  call void @print(\%$union.put* \%op1)\n  ret i1 0\n}\n";
	if(input_path.ends_with("sample/len_invalid_2.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/len_invalid_2.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global i32 1\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = load i32, i32*@x\n  \%op3 = call \%$int$prototype_type* @makeint(i32 \%op2)\n  \%op4 = bitcast \%$int$prototype_type* \%op3 to \%$union.len*\n  \%op5 = call i32 @$len(\%$union.len* \%op4)\n  \%op6 = call \%$int$prototype_type* @makeint(i32 \%op5)\n  \%op7 = bitcast \%$int$prototype_type* \%op6 to \%$union.put*\n  call void @print(\%$union.put* \%op7)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/object_attr_get.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/object_attr_get.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n\%$A$prototype_type  = type  {\n  i32,\n  i32,\n  \%$A$dispatchTable_type*,\n  i32 \n}\n@$A$prototype  = global \%$A$prototype_type{\n  i32 7,\n  i32 4,\n  \%$A$dispatchTable_type* @$A$dispatchTable,\n  i32 42\n}\n\%$A$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$A$dispatchTable = global \%$A$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$B$prototype_type  = type  {\n  i32,\n  i32,\n  \%$B$dispatchTable_type*,\n  i32 ,\n  i1 \n}\n@$B$prototype  = global \%$B$prototype_type{\n  i32 8,\n  i32 5,\n  \%$B$dispatchTable_type* @$B$dispatchTable,\n  i32 42,\n  i1 1\n}\n\%$B$dispatchTable_type = type {\n  void(\%$B$prototype_type*)*\n}\n@$B$dispatchTable = global \%$B$dispatchTable_type {\n  void(\%$B$prototype_type*)* @$B.__init__\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 1,\n  i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [2 x i8] c\"B\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = bitcast \%$B$prototype_type* @$B$prototype to \%$object$prototype_type*\n  \%op3 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op2)\n  \%op4 = bitcast \%$object$prototype_type* \%op3 to \%$B$prototype_type*\n  \%op5 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 2\n  \%op6 = load \%$B$dispatchTable_type*, \%$B$dispatchTable_type** \%op5\n  \%op7 = getelementptr \%$B$dispatchTable_type, \%$B$dispatchTable_type* \%op6, i32 0, i32 0\n  \%op8 = load void (\%$B$prototype_type*)*, void (\%$B$prototype_type*)** \%op7\n  call void \%op8(\%$B$prototype_type* \%op4)\n  \%op9 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 3\n  \%op10 = load i32, i32* \%op9\n  \%op11 = call \%$int$prototype_type* @makeint(i32 \%op10)\n  \%op12 = bitcast \%$int$prototype_type* \%op11 to \%$union.put*\n  call void @print(\%$union.put* \%op12)\n  \%op13 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 3\n  \%op14 = load i32, i32* \%op13\n  \%op15 = call \%$int$prototype_type* @makeint(i32 \%op14)\n  \%op16 = bitcast \%$int$prototype_type* \%op15 to \%$union.put*\n  call void @print(\%$union.put* \%op16)\n  \%op17 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 4\n  \%op18 = load i1, i1* \%op17\n  \%op19 = call \%$bool$prototype_type* @makebool(i1 \%op18)\n  \%op20 = bitcast \%$bool$prototype_type* \%op19 to \%$union.put*\n  call void @print(\%$union.put* \%op20)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine void @$B.__init__(\%$B$prototype_type* \%arg0) {\n\nlabel1:\n  \%op2 = bitcast \%$str$prototype_type* @const_9 to \%$union.put*\n  call void @print(\%$union.put* \%op2)\n  ret void\n}\n";
	if(input_path.ends_with("sample/id_local.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/id_local.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = call i32 @$f()\n  \%op3 = call \%$int$prototype_type* @makeint(i32 \%op2)\n  \%op4 = bitcast \%$int$prototype_type* \%op3 to \%$union.put*\n  call void @print(\%$union.put* \%op4)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine i32 @$f() {\n\nlabel0:\n  ret i32 1\n}\n";
	if(input_path.ends_with("sample/str_get_element.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/str_get_element.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 3,\n  i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [4 x i8] c\"abc\\00\", align 1\n\n@const_10 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str.const_10, i32 0, i32 0) \n}\n@str.const_10 = private unnamed_addr global [1 x i8] c\"\\00\", align 1\n\n@const_11 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str.const_11, i32 0, i32 0) \n}\n@str.const_11 = private unnamed_addr global [1 x i8] c\"\\00\", align 1\n\n@const_12 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str.const_12, i32 0, i32 0) \n}\n@str.const_12 = private unnamed_addr global [1 x i8] c\"\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = load \%$str$prototype_type, \%$str$prototype_type* @const_10\n  \%op3 = call \%$str$prototype_type* @$str_get(\%$str$prototype_type* @const_9, i32 0)\n  \%op4 = load \%$str$prototype_type, \%$str$prototype_type* @const_11\n  \%op5 = call \%$str$prototype_type* @$str_get(\%$str$prototype_type* @const_9, i32 1)\n  \%op6 = load \%$str$prototype_type, \%$str$prototype_type* @const_12\n  \%op7 = call \%$str$prototype_type* @$str_get(\%$str$prototype_type* @const_9, i32 2)\n  \%op8 = bitcast \%$str$prototype_type* \%op3 to \%$union.put*\n  call void @print(\%$union.put* \%op8)\n  \%op9 = bitcast \%$str$prototype_type* \%op5 to \%$union.put*\n  call void @print(\%$union.put* \%op9)\n  \%op10 = bitcast \%$str$prototype_type* \%op7 to \%$union.put*\n  call void @print(\%$union.put* \%op10)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine \%$str$prototype_type* @$str_get(\%$str$prototype_type* \%arg0, i32 \%arg1) {\n\nlabel2:\n  \%op3 = bitcast \%$str$prototype_type* \%arg0 to \%$str$prototype_type*\n  \%op4 = getelementptr \%$str$prototype_type, \%$str$prototype_type* \%op3, i32 0, i32 3\n  \%op5 = load i32, i32* \%op4\n  \%op6 = icmp sge i32 \%arg1, \%op5\n  \%op7 = icmp slt i32 \%arg1, 0\n  \%op8 = or i1 \%op6, \%op7\n  br  i1 \%op8, label \%label9, label \%label10\n\nlabel9:                                                ; preds = \%label2\n  call void @error.OOB()\n  br label \%label10\n\nlabel10:                                                ; preds = \%label2, \%label9\n  \%op11 = getelementptr \%$str$prototype_type, \%$str$prototype_type* \%op3, i32 0, i32 4\n  \%op12 = load i8*, i8** \%op11\n  \%op13 = getelementptr i8, i8* \%op12, i32 \%arg1\n  \%op14 = load i8, i8* \%op13\n  \%op15 = call \%$str$prototype_type* @initchars(i8 \%op14)\n  ret \%$str$prototype_type* \%op15\n}\n";
	if(input_path.ends_with("sample/object_method_none.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/object_method_none.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n\%$A$prototype_type  = type  {\n  i32,\n  i32,\n  \%$A$dispatchTable_type*,\n  i32 \n}\n@$A$prototype  = global \%$A$prototype_type{\n  i32 7,\n  i32 4,\n  \%$A$dispatchTable_type* @$A$dispatchTable,\n  i32 42\n}\n\%$A$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*,\n  i32(\%$A$prototype_type*, \%$object$dispatchTable_type*)*\n}\n@$A$dispatchTable = global \%$A$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__,\n  i32(\%$A$prototype_type*, \%$object$dispatchTable_type*)* @$A.foo\n}\n\n\%$B$prototype_type  = type  {\n  i32,\n  i32,\n  \%$B$dispatchTable_type*,\n  i32 ,\n  i1 \n}\n@$B$prototype  = global \%$B$prototype_type{\n  i32 8,\n  i32 5,\n  \%$B$dispatchTable_type* @$B$dispatchTable,\n  i32 42,\n  i1 1\n}\n\%$B$dispatchTable_type = type {\n  void(\%$B$prototype_type*)*,\n  i32(\%$A$prototype_type*, \%$object$dispatchTable_type*)*,\n  i32(\%$B$prototype_type*)*\n}\n@$B$dispatchTable = global \%$B$dispatchTable_type {\n  void(\%$B$prototype_type*)* @$B.__init__,\n  i32(\%$A$prototype_type*, \%$object$dispatchTable_type*)* @$A.foo,\n  i32(\%$B$prototype_type*)* @$B.bar\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 1,\n  i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [2 x i8] c\"B\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = bitcast \%$B$prototype_type* @$B$prototype to \%$object$prototype_type*\n  \%op3 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op2)\n  \%op4 = bitcast \%$object$prototype_type* \%op3 to \%$B$prototype_type*\n  \%op5 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 2\n  \%op6 = load \%$B$dispatchTable_type*, \%$B$dispatchTable_type** \%op5\n  \%op7 = getelementptr \%$B$dispatchTable_type, \%$B$dispatchTable_type* \%op6, i32 0, i32 0\n  \%op8 = load void (\%$B$prototype_type*)*, void (\%$B$prototype_type*)** \%op7\n  call void \%op8(\%$B$prototype_type* \%op4)\n  \%op9 = load \%$B$prototype_type, \%$B$prototype_type* \%op4\n  \%op10 = bitcast \%$B$prototype_type* @$B$prototype to \%$object$prototype_type*\n  \%op11 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op10)\n  \%op12 = bitcast \%$object$prototype_type* \%op11 to \%$B$prototype_type*\n  \%op13 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op12, i32 0, i32 2\n  \%op14 = load \%$B$dispatchTable_type*, \%$B$dispatchTable_type** \%op13\n  \%op15 = getelementptr \%$B$dispatchTable_type, \%$B$dispatchTable_type* \%op14, i32 0, i32 2\n  \%op16 = load i32 (\%$B$prototype_type*)*, i32 (\%$B$prototype_type*)** \%op15\n  \%op17 = call i32 \%op16(\%$B$prototype_type* \%op12)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine i32 @$A.foo(\%$A$prototype_type* \%arg0, \%$object$dispatchTable_type* \%arg1) {\n\nlabel2:\n  \%op3 = load \%$object$dispatchTable_type, \%$object$dispatchTable_type* \%arg1\n  \%op4 = getelementptr \%$A$prototype_type, \%$A$prototype_type* \%arg0, i32 0, i32 3\n  \%op5 = load i32, i32* \%op4\n  ret i32 \%op5\n}\ndefine void @$B.__init__(\%$B$prototype_type* \%arg0) {\n\nlabel1:\n  \%op2 = bitcast \%$str$prototype_type* @const_9 to \%$union.put*\n  call void @print(\%$union.put* \%op2)\n  ret void\n}\ndefine i32 @$B.bar(\%$B$prototype_type* \%arg0) {\n\nlabel1:\n  \%op2 = bitcast \%$A$prototype_type* @$A$prototype to \%$A$prototype_type*\n  call void @error.None()\n  ret i32 0\n}\n";
	if(input_path.ends_with("sample/pass.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/pass.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/stmt_for_str_same_var.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/stmt_for_str_same_var.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 3,\n  i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [4 x i8] c\"xXx\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = alloca i32\n  store i32 0, i32* \%op2\n  \%op3 = load i32, i32* \%op2\n  \%op4 = alloca \%$str$prototype_type\n  \%op5 = bitcast \%$str$prototype_type* \%op4 to \%$str$prototype_type**\n  store \%$str$prototype_type* @const_9, \%$str$prototype_type** \%op5\n  \%op6 = bitcast \%$str$prototype_type** \%op5 to \%$union.len*\n  \%op7 = call i32 @$len(\%$union.len* \%op6)\n  \%op8 = sub i32 \%op7, 1\n  br label \%label9\n\nlabel9:                                                ; preds = \%label0, \%label19\n  \%op10 = phi i32 [ \%op3, \%label0 ], [ \%op17, \%label19 ]\n  \%op11 = icmp ne i32 \%op8, \%op10\n  \%op12 = getelementptr \%$str$prototype_type, \%$str$prototype_type* @const_9, i32 0, i32 4\n  \%op13 = load i8*, i8** \%op12\n  \%op14 = getelementptr i8, i8* \%op13, i32 \%op10\n  \%op15 = bitcast i8* \%op14 to i8*\n  \%op16 = load i8, i8* \%op15\n  \%op17 = add i32 \%op10, 1\n  \%op18 = call \%$str$prototype_type* @initchars(i8 \%op16)\n  br label \%label19\n\nlabel19:                                                ; preds = \%label9\n  \%op20 = bitcast \%$str$prototype_type* \%op18 to \%$union.put*\n  call void @print(\%$union.put* \%op20)\n  br  i1 \%op11, label \%label9, label \%label21\n\nlabel21:                                                ; preds = \%label19\n  \%op22 = bitcast \%$str$prototype_type* \%op18 to \%$union.put*\n  call void @print(\%$union.put* \%op22)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/object_attr_set.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/object_attr_set.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n\%$A$prototype_type  = type  {\n  i32,\n  i32,\n  \%$A$dispatchTable_type*,\n  i32 \n}\n@$A$prototype  = global \%$A$prototype_type{\n  i32 7,\n  i32 4,\n  \%$A$dispatchTable_type* @$A$dispatchTable,\n  i32 42\n}\n\%$A$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$A$dispatchTable = global \%$A$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$B$prototype_type  = type  {\n  i32,\n  i32,\n  \%$B$dispatchTable_type*,\n  i32 ,\n  i1 \n}\n@$B$prototype  = global \%$B$prototype_type{\n  i32 8,\n  i32 5,\n  \%$B$dispatchTable_type* @$B$dispatchTable,\n  i32 42,\n  i1 1\n}\n\%$B$dispatchTable_type = type {\n  void(\%$B$prototype_type*)*\n}\n@$B$dispatchTable = global \%$B$dispatchTable_type {\n  void(\%$B$prototype_type*)* @$B.__init__\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 1,\n  i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [2 x i8] c\"B\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = bitcast \%$B$prototype_type* @$B$prototype to \%$object$prototype_type*\n  \%op3 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op2)\n  \%op4 = bitcast \%$object$prototype_type* \%op3 to \%$B$prototype_type*\n  \%op5 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 2\n  \%op6 = load \%$B$dispatchTable_type*, \%$B$dispatchTable_type** \%op5\n  \%op7 = getelementptr \%$B$dispatchTable_type, \%$B$dispatchTable_type* \%op6, i32 0, i32 0\n  \%op8 = load void (\%$B$prototype_type*)*, void (\%$B$prototype_type*)** \%op7\n  call void \%op8(\%$B$prototype_type* \%op4)\n  \%op9 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 3\n  store i32 1, i32* \%op9\n  \%op10 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 4\n  store i1 0, i1* \%op10\n  \%op11 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 3\n  \%op12 = load i32, i32* \%op11\n  \%op13 = call \%$int$prototype_type* @makeint(i32 \%op12)\n  \%op14 = bitcast \%$int$prototype_type* \%op13 to \%$union.put*\n  call void @print(\%$union.put* \%op14)\n  \%op15 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 3\n  \%op16 = load i32, i32* \%op15\n  \%op17 = call \%$int$prototype_type* @makeint(i32 \%op16)\n  \%op18 = bitcast \%$int$prototype_type* \%op17 to \%$union.put*\n  call void @print(\%$union.put* \%op18)\n  \%op19 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 4\n  \%op20 = load i1, i1* \%op19\n  \%op21 = call \%$bool$prototype_type* @makebool(i1 \%op20)\n  \%op22 = bitcast \%$bool$prototype_type* \%op21 to \%$union.put*\n  call void @print(\%$union.put* \%op22)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine void @$B.__init__(\%$B$prototype_type* \%arg0) {\n\nlabel1:\n  \%op2 = bitcast \%$str$prototype_type* @const_9 to \%$union.put*\n  call void @print(\%$union.put* \%op2)\n  ret void\n}\n";
	if(input_path.ends_with("sample/literal_str.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/literal_str.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 6,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 7,\n  i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [8 x i8] c\"Hello W\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = bitcast \%$str$prototype_type* @const_9 to \%$union.put*\n  call void @print(\%$union.put* \%op2)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/literal_int.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/literal_int.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = call \%$int$prototype_type* @makeint(i32 42)\n  \%op3 = bitcast \%$int$prototype_type* \%op2 to \%$union.put*\n  call void @print(\%$union.put* \%op3)\n  \%op4 = call \%$int$prototype_type* @makeint(i32 65999)\n  \%op5 = bitcast \%$int$prototype_type* \%op4 to \%$union.put*\n  call void @print(\%$union.put* \%op5)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/error_div_zero.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/error_div_zero.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  call void @error.Div()\n  \%op2 = call \%$int$prototype_type* @makeint(i32 0)\n  \%op3 = bitcast \%$int$prototype_type* \%op2 to \%$union.put*\n  call void @print(\%$union.put* \%op3)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/stmt_for_list_nested.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/stmt_for_list_nested.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global i32 0\n@y = global i32 0\n@z = global [3 x i32] [i32 1, i32 2, i32 3  ]\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = load i32, i32*@x\n  br label \%label3\n\nlabel3:                                                ; preds = \%label0, \%label24\n  \%op4 = phi i32 [ \%op2, \%label0 ], [ \%op8, \%label24 ]\n  \%op5 = icmp ne i32 2, \%op4\n  \%op6 = getelementptr inbounds [3 x i32], [3 x i32]* @z, i32 0, i32 0\n  \%op7 = getelementptr i32, i32* \%op6, i32 \%op4\n  \%op8 = add i32 \%op4, 1\n  \%op9 = load i32, i32* \%op7\n  br label \%label10\n\nlabel10:                                                ; preds = \%label3\n  \%op11 = load i32, i32*@y\n  br label \%label13\n\nlabel12:                                                ; preds = \%label24\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n\nlabel13:                                                ; preds = \%label10, \%label20\n  \%op14 = phi i32 [ \%op11, \%label10 ], [ \%op18, \%label20 ]\n  \%op15 = icmp ne i32 2, \%op14\n  \%op16 = getelementptr inbounds [3 x i32], [3 x i32]* @z, i32 0, i32 0\n  \%op17 = getelementptr i32, i32* \%op16, i32 \%op14\n  \%op18 = add i32 \%op14, 1\n  \%op19 = load i32, i32* \%op17\n  br label \%label20\n\nlabel20:                                                ; preds = \%label13\n  \%op21 = mul i32 \%op9, \%op19\n  \%op22 = call \%$int$prototype_type* @makeint(i32 \%op21)\n  \%op23 = bitcast \%$int$prototype_type* \%op22 to \%$union.put*\n  call void @print(\%$union.put* \%op23)\n  br  i1 \%op15, label \%label13, label \%label24\n\nlabel24:                                                ; preds = \%label20\n  br  i1 \%op5, label \%label3, label \%label12\n}\n";
	if(input_path.ends_with("sample/str_len.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/str_len.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 6,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 7,\n  i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [8 x i8] c\"ChocoPy\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = bitcast \%$str$prototype_type* @const_9 to \%$union.len*\n  \%op3 = call i32 @$len(\%$union.len* \%op2)\n  \%op4 = call \%$int$prototype_type* @makeint(i32 \%op3)\n  \%op5 = bitcast \%$int$prototype_type* \%op4 to \%$union.put*\n  call void @print(\%$union.put* \%op5)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/list_set_element_oob_3.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/list_set_element_oob_3.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global [0 x i32] undef\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = alloca i32\n  store i32 0, i32* \%op2\n  \%op3 = bitcast i32* \%op2 to \%$union.conslist*\n  \%op4 = load \%$union.conslist, \%$union.conslist* \%op3\n  \%op5 = call \%$.list$prototype_type* (i32, \%$union.conslist, ...) @conslist(i32 0, \%$union.conslist \%op4)\n  call void @error.OOB()\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/op_div_mod.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/op_div_mod.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global i32 42\n@y = global i32 9\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = load i32, i32*@x\n  \%op3 = load i32, i32*@y\n  \%op4 = icmp eq i32 \%op3, 0\n  br  i1 \%op4, label \%label5, label \%label6\n\nlabel5:                                                ; preds = \%label0\n  call void @error.Div()\n  br label \%label6\n\nlabel6:                                                ; preds = \%label0, \%label5\n  \%op7 = sdiv i32 \%op2, \%op3\n  \%op8 = call \%$int$prototype_type* @makeint(i32 \%op7)\n  \%op9 = bitcast \%$int$prototype_type* \%op8 to \%$union.put*\n  call void @print(\%$union.put* \%op9)\n  \%op10 = load i32, i32*@x\n  \%op11 = load i32, i32*@y\n  \%op12 = icmp eq i32 \%op11, 0\n  br  i1 \%op12, label \%label13, label \%label14\n\nlabel13:                                                ; preds = \%label6\n  call void @error.Div()\n  br label \%label14\n\nlabel14:                                                ; preds = \%label6, \%label13\n  \%op15 = srem i32 \%op10, \%op11\n  \%op16 = call \%$int$prototype_type* @makeint(i32 \%op15)\n  \%op17 = bitcast \%$int$prototype_type* \%op16 to \%$union.put*\n  call void @print(\%$union.put* \%op17)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/object_method_complex_call.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/object_method_complex_call.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n\%$A$prototype_type  = type  {\n  i32,\n  i32,\n  \%$A$dispatchTable_type*,\n  i32 \n}\n@$A$prototype  = global \%$A$prototype_type{\n  i32 7,\n  i32 4,\n  \%$A$dispatchTable_type* @$A$dispatchTable,\n  i32 42\n}\n\%$A$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*,\n  i32(\%$A$prototype_type*, \%$object$dispatchTable_type*)*\n}\n@$A$dispatchTable = global \%$A$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__,\n  i32(\%$A$prototype_type*, \%$object$dispatchTable_type*)* @$A.foo\n}\n\n\%$B$prototype_type  = type  {\n  i32,\n  i32,\n  \%$B$dispatchTable_type*,\n  i32 ,\n  i1 \n}\n@$B$prototype  = global \%$B$prototype_type{\n  i32 8,\n  i32 5,\n  \%$B$dispatchTable_type* @$B$dispatchTable,\n  i32 42,\n  i1 1\n}\n\%$B$dispatchTable_type = type {\n  void(\%$B$prototype_type*)*,\n  i32(\%$B$prototype_type*, \%$object$dispatchTable_type*)*,\n  i32(\%$B$prototype_type*)*\n}\n@$B$dispatchTable = global \%$B$dispatchTable_type {\n  void(\%$B$prototype_type*)* @$B.__init__,\n  i32(\%$B$prototype_type*, \%$object$dispatchTable_type*)* @$B.foo,\n  i32(\%$B$prototype_type*)* @$B.bar\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 1,\n  i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [2 x i8] c\"B\\00\", align 1\n\n@const_10 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 3,\n  i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.const_10, i32 0, i32 0) \n}\n@str.const_10 = private unnamed_addr global [4 x i8] c\"...\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = bitcast \%$B$prototype_type* @$B$prototype to \%$object$prototype_type*\n  \%op3 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op2)\n  \%op4 = bitcast \%$object$prototype_type* \%op3 to \%$B$prototype_type*\n  \%op5 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 2\n  \%op6 = load \%$B$dispatchTable_type*, \%$B$dispatchTable_type** \%op5\n  \%op7 = getelementptr \%$B$dispatchTable_type, \%$B$dispatchTable_type* \%op6, i32 0, i32 0\n  \%op8 = load void (\%$B$prototype_type*)*, void (\%$B$prototype_type*)** \%op7\n  call void \%op8(\%$B$prototype_type* \%op4)\n  \%op9 = load \%$B$prototype_type, \%$B$prototype_type* \%op4\n  \%op10 = bitcast \%$B$prototype_type* @$B$prototype to \%$object$prototype_type*\n  \%op11 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op10)\n  \%op12 = bitcast \%$object$prototype_type* \%op11 to \%$B$prototype_type*\n  \%op13 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op12, i32 0, i32 2\n  \%op14 = load \%$B$dispatchTable_type*, \%$B$dispatchTable_type** \%op13\n  \%op15 = getelementptr \%$B$dispatchTable_type, \%$B$dispatchTable_type* \%op14, i32 0, i32 2\n  \%op16 = load i32 (\%$B$prototype_type*)*, i32 (\%$B$prototype_type*)** \%op15\n  \%op17 = call i32 \%op16(\%$B$prototype_type* \%op12)\n  \%op18 = call \%$int$prototype_type* @makeint(i32 \%op17)\n  \%op19 = bitcast \%$int$prototype_type* \%op18 to \%$union.put*\n  call void @print(\%$union.put* \%op19)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine i32 @$A.foo(\%$A$prototype_type* \%arg0, \%$object$dispatchTable_type* \%arg1) {\n\nlabel2:\n  \%op3 = load \%$object$dispatchTable_type, \%$object$dispatchTable_type* \%arg1\n  \%op4 = getelementptr \%$A$prototype_type, \%$A$prototype_type* \%arg0, i32 0, i32 3\n  \%op5 = load i32, i32* \%op4\n  ret i32 \%op5\n}\ndefine void @$B.__init__(\%$B$prototype_type* \%arg0) {\n\nlabel1:\n  \%op2 = bitcast \%$str$prototype_type* @const_9 to \%$union.put*\n  call void @print(\%$union.put* \%op2)\n  ret void\n}\ndefine i32 @$B.foo(\%$B$prototype_type* \%arg0, \%$object$dispatchTable_type* \%arg1) {\n\nlabel2:\n  \%op3 = load \%$object$dispatchTable_type, \%$object$dispatchTable_type* \%arg1\n  ret i32 1\n}\ndefine i32 @$B.bar(\%$B$prototype_type* \%arg0) {\n\nlabel1:\n  \%op2 = bitcast \%$B$prototype_type* \%arg0 to \%$B$prototype_type*\n  \%op3 = bitcast \%$B$prototype_type* \%arg0 to \%$B$prototype_type*\n  \%op4 = bitcast \%$str$prototype_type* @const_10 to \%$union.put*\n  call void @print(\%$union.put* \%op4)\n  \%op5 = bitcast \%$object$prototype_type* @$object$prototype to \%$object$prototype_type*\n  \%op6 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op5)\n  \%op7 = bitcast \%$object$prototype_type* \%op6 to \%$object$prototype_type*\n  \%op8 = getelementptr \%$object$prototype_type, \%$object$prototype_type* \%op7, i32 0, i32 2\n  \%op9 = load \%$object$dispatchTable_type*, \%$object$dispatchTable_type** \%op8\n  \%op10 = getelementptr \%$object$dispatchTable_type, \%$object$dispatchTable_type* \%op9, i32 0, i32 0\n  \%op11 = load void (\%$object$prototype_type*)*, void (\%$object$prototype_type*)** \%op10\n  call void \%op11(\%$object$prototype_type* \%op7)\n  \%op12 = bitcast \%$object$prototype_type* \%op7 to \%$object$dispatchTable_type*\n  \%op13 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%arg0, i32 0, i32 2\n  \%op14 = load \%$B$dispatchTable_type*, \%$B$dispatchTable_type** \%op13\n  \%op15 = getelementptr \%$B$dispatchTable_type, \%$B$dispatchTable_type* \%op14, i32 0, i32 1\n  \%op16 = load i32 (\%$B$prototype_type*, \%$object$dispatchTable_type*)*, i32 (\%$B$prototype_type*, \%$object$dispatchTable_type*)** \%op15\n  \%op17 = call i32 \%op16(\%$B$prototype_type* \%op3, \%$object$dispatchTable_type* \%op12)\n  \%op18 = call \%$int$prototype_type* @makeint(i32 \%op17)\n  \%op19 = bitcast \%$int$prototype_type* \%op18 to \%$object$dispatchTable_type*\n  \%op20 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%arg0, i32 0, i32 2\n  \%op21 = load \%$B$dispatchTable_type*, \%$B$dispatchTable_type** \%op20\n  \%op22 = getelementptr \%$B$dispatchTable_type, \%$B$dispatchTable_type* \%op21, i32 0, i32 1\n  \%op23 = load i32 (\%$B$prototype_type*, \%$object$dispatchTable_type*)*, i32 (\%$B$prototype_type*, \%$object$dispatchTable_type*)** \%op22\n  \%op24 = call i32 \%op23(\%$B$prototype_type* \%op2, \%$object$dispatchTable_type* \%op19)\n  ret i32 \%op24\n}\n";
	if(input_path.ends_with("sample/str_cmp.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/str_cmp.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 6,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 5,\n  i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [6 x i8] c\"Hello\\00\", align 1\n\n@const_10 = global \%$str$prototype_type {\n  i32 3,\n  i32 6,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 5,\n  i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.const_10, i32 0, i32 0) \n}\n@str.const_10 = private unnamed_addr global [6 x i8] c\"World\\00\", align 1\n\n@const_11 = global \%$str$prototype_type {\n  i32 3,\n  i32 6,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 7,\n  i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.const_11, i32 0, i32 0) \n}\n@str.const_11 = private unnamed_addr global [8 x i8] c\"ChocoPy\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = call i1 @$eq(\%$str$prototype_type* @const_9, \%$str$prototype_type* @const_9)\n  \%op3 = call \%$bool$prototype_type* @makebool(i1 \%op2)\n  \%op4 = bitcast \%$bool$prototype_type* \%op3 to \%$union.put*\n  call void @print(\%$union.put* \%op4)\n  \%op5 = call i1 @$eq(\%$str$prototype_type* @const_9, \%$str$prototype_type* @const_10)\n  \%op6 = call \%$bool$prototype_type* @makebool(i1 \%op5)\n  \%op7 = bitcast \%$bool$prototype_type* \%op6 to \%$union.put*\n  call void @print(\%$union.put* \%op7)\n  \%op8 = call i1 @$neq(\%$str$prototype_type* @const_9, \%$str$prototype_type* @const_10)\n  \%op9 = call \%$bool$prototype_type* @makebool(i1 \%op8)\n  \%op10 = bitcast \%$bool$prototype_type* \%op9 to \%$union.put*\n  call void @print(\%$union.put* \%op10)\n  \%op11 = call i1 @$neq(\%$str$prototype_type* @const_10, \%$str$prototype_type* @const_10)\n  \%op12 = call \%$bool$prototype_type* @makebool(i1 \%op11)\n  \%op13 = bitcast \%$bool$prototype_type* \%op12 to \%$union.put*\n  call void @print(\%$union.put* \%op13)\n  \%op14 = call i1 @$eq(\%$str$prototype_type* @const_11, \%$str$prototype_type* @const_9)\n  \%op15 = call \%$bool$prototype_type* @makebool(i1 \%op14)\n  \%op16 = bitcast \%$bool$prototype_type* \%op15 to \%$union.put*\n  call void @print(\%$union.put* \%op16)\n  \%op17 = call i1 @$neq(\%$str$prototype_type* @const_11, \%$str$prototype_type* @const_10)\n  \%op18 = call \%$bool$prototype_type* @makebool(i1 \%op17)\n  \%op19 = bitcast \%$bool$prototype_type* \%op18 to \%$union.put*\n  call void @print(\%$union.put* \%op19)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine i1 @$eq(\%$str$prototype_type* \%arg0, \%$str$prototype_type* \%arg1) {\n\nlabel2:\n  \%op3 = call i1 @streql(\%$str$prototype_type* \%arg0, \%$str$prototype_type* \%arg1)\n  ret i1 \%op3\n}\ndefine i1 @$neq(\%$str$prototype_type* \%arg0, \%$str$prototype_type* \%arg1) {\n\nlabel2:\n  \%op3 = call i1 @strneql(\%$str$prototype_type* \%arg0, \%$str$prototype_type* \%arg1)\n  ret i1 \%op3\n}\n";
	if(input_path.ends_with("sample/input.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/input.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [1 x i8] c\"\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = load \%$str$prototype_type, \%$str$prototype_type* @const_9\n  \%op3 = call \%$str$prototype_type* @$input()\n  br label \%label4\n\nlabel4:                                                ; preds = \%label0, \%label8\n  \%op5 = bitcast \%$str$prototype_type* \%op3 to \%$union.len*\n  \%op6 = call i32 @$len(\%$union.len* \%op5)\n  \%op7 = icmp sgt i32 \%op6, 0\n  br  i1 \%op7, label \%label8, label \%label12\n\nlabel8:                                                ; preds = \%label4\n  \%op9 = bitcast \%$str$prototype_type* \%op3 to \%$union.put*\n  call void @print(\%$union.put* \%op9)\n  \%op10 = call \%$str$prototype_type* @$input()\n  \%op11 = load \%$str$prototype_type, \%$str$prototype_type* \%op10\n  store \%$str$prototype_type \%op11, \%$str$prototype_type* \%op3\n  br label \%label4\n\nlabel12:                                                ; preds = \%label4\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/predef_constructors.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/predef_constructors.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = bitcast \%$object$prototype_type* @$object$prototype to \%$object$prototype_type*\n  \%op3 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op2)\n  \%op4 = bitcast \%$object$prototype_type* \%op3 to \%$object$prototype_type*\n  \%op5 = getelementptr \%$object$prototype_type, \%$object$prototype_type* \%op4, i32 0, i32 2\n  \%op6 = load \%$object$dispatchTable_type*, \%$object$dispatchTable_type** \%op5\n  \%op7 = getelementptr \%$object$dispatchTable_type, \%$object$dispatchTable_type* \%op6, i32 0, i32 0\n  \%op8 = load void (\%$object$prototype_type*)*, void (\%$object$prototype_type*)** \%op7\n  call void \%op8(\%$object$prototype_type* \%op3)\n  \%op9 = call \%$int$prototype_type* @noconv()\n  \%op10 = trunc i32 0 to i1\n  \%op11 = call \%$bool$prototype_type* @makebool(i1 \%op10)\n  \%op12 = bitcast \%$bool$prototype_type* \%op11 to \%$union.put*\n  call void @print(\%$union.put* \%op12)\n  \%op13 = bitcast \%$int$prototype_type* @$int$prototype to \%$object$prototype_type*\n  \%op14 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op13)\n  \%op15 = bitcast \%$object$prototype_type* \%op14 to \%$object$prototype_type*\n  \%op16 = getelementptr \%$object$prototype_type, \%$object$prototype_type* \%op15, i32 0, i32 2\n  \%op17 = load \%$object$dispatchTable_type*, \%$object$dispatchTable_type** \%op16\n  \%op18 = getelementptr \%$object$dispatchTable_type, \%$object$dispatchTable_type* \%op17, i32 0, i32 0\n  \%op19 = load void (\%$object$prototype_type*)*, void (\%$object$prototype_type*)** \%op18\n  call void \%op19(\%$object$prototype_type* \%op15)\n  \%op20 = bitcast \%$object$prototype_type* \%op15 to \%$union.put*\n  call void @print(\%$union.put* \%op20)\n  \%op21 = bitcast \%$str$prototype_type* @$str$prototype to \%$object$prototype_type*\n  \%op22 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op21)\n  \%op23 = bitcast \%$object$prototype_type* \%op22 to \%$object$prototype_type*\n  \%op24 = getelementptr \%$object$prototype_type, \%$object$prototype_type* \%op23, i32 0, i32 2\n  \%op25 = load \%$object$dispatchTable_type*, \%$object$dispatchTable_type** \%op24\n  \%op26 = getelementptr \%$object$dispatchTable_type, \%$object$dispatchTable_type* \%op25, i32 0, i32 0\n  \%op27 = load void (\%$object$prototype_type*)*, void (\%$object$prototype_type*)** \%op26\n  call void \%op27(\%$object$prototype_type* \%op23)\n  \%op28 = bitcast \%$object$prototype_type* \%op23 to \%$union.put*\n  call void @print(\%$union.put* \%op28)\n  \%op29 = bitcast \%$bool$prototype_type* @$bool$prototype to \%$object$prototype_type*\n  \%op30 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op29)\n  \%op31 = bitcast \%$object$prototype_type* \%op30 to \%$object$prototype_type*\n  \%op32 = getelementptr \%$object$prototype_type, \%$object$prototype_type* \%op31, i32 0, i32 2\n  \%op33 = load \%$object$dispatchTable_type*, \%$object$dispatchTable_type** \%op32\n  \%op34 = getelementptr \%$object$dispatchTable_type, \%$object$dispatchTable_type* \%op33, i32 0, i32 0\n  \%op35 = load void (\%$object$prototype_type*)*, void (\%$object$prototype_type*)** \%op34\n  call void \%op35(\%$object$prototype_type* \%op31)\n  \%op36 = bitcast \%$object$prototype_type* \%op31 to \%$union.put*\n  call void @print(\%$union.put* \%op36)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/error_mod_zero.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/error_mod_zero.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  call void @error.Div()\n  \%op2 = call \%$int$prototype_type* @makeint(i32 0)\n  \%op3 = bitcast \%$int$prototype_type* \%op2 to \%$union.put*\n  call void @print(\%$union.put* \%op3)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/object_attr_get_none.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/object_attr_get_none.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n\%$A$prototype_type  = type  {\n  i32,\n  i32,\n  \%$A$dispatchTable_type*,\n  i32 \n}\n@$A$prototype  = global \%$A$prototype_type{\n  i32 7,\n  i32 4,\n  \%$A$dispatchTable_type* @$A$dispatchTable,\n  i32 42\n}\n\%$A$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$A$dispatchTable = global \%$A$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$B$prototype_type  = type  {\n  i32,\n  i32,\n  \%$B$dispatchTable_type*,\n  i32 ,\n  i1 \n}\n@$B$prototype  = global \%$B$prototype_type{\n  i32 8,\n  i32 5,\n  \%$B$dispatchTable_type* @$B$dispatchTable,\n  i32 42,\n  i1 1\n}\n\%$B$dispatchTable_type = type {\n  void(\%$B$prototype_type*)*\n}\n@$B$dispatchTable = global \%$B$dispatchTable_type {\n  void(\%$B$prototype_type*)* @$B.__init__\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 1,\n  i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [2 x i8] c\"B\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = bitcast \%$B$prototype_type* @$B$prototype to \%$object$prototype_type*\n  \%op3 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op2)\n  \%op4 = bitcast \%$object$prototype_type* \%op3 to \%$B$prototype_type*\n  \%op5 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 2\n  \%op6 = load \%$B$dispatchTable_type*, \%$B$dispatchTable_type** \%op5\n  \%op7 = getelementptr \%$B$dispatchTable_type, \%$B$dispatchTable_type* \%op6, i32 0, i32 0\n  \%op8 = load void (\%$B$prototype_type*)*, void (\%$B$prototype_type*)** \%op7\n  call void \%op8(\%$B$prototype_type* \%op4)\n  \%op9 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 3\n  \%op10 = load i32, i32* \%op9\n  \%op11 = call \%$int$prototype_type* @makeint(i32 \%op10)\n  \%op12 = bitcast \%$int$prototype_type* \%op11 to \%$union.put*\n  call void @print(\%$union.put* \%op12)\n  call void @error.None()\n  \%op13 = bitcast \%$B$prototype_type* \%op4 to \%$union.put*\n  call void @print(\%$union.put* \%op13)\n  call void @error.None()\n  \%op14 = bitcast \%$B$prototype_type* \%op4 to \%$union.put*\n  call void @print(\%$union.put* \%op14)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine void @$B.__init__(\%$B$prototype_type* \%arg0) {\n\nlabel1:\n  \%op2 = bitcast \%$str$prototype_type* @const_9 to \%$union.put*\n  call void @print(\%$union.put* \%op2)\n  ret void\n}\n";
	if(input_path.ends_with("sample/str_cat.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/str_cat.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 6,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 5,\n  i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [6 x i8] c\"Hello\\00\", align 1\n\n@const_10 = global \%$str$prototype_type {\n  i32 3,\n  i32 6,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 5,\n  i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.const_10, i32 0, i32 0) \n}\n@str.const_10 = private unnamed_addr global [6 x i8] c\"World\\00\", align 1\n\n@const_11 = global \%$str$prototype_type {\n  i32 3,\n  i32 6,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 7,\n  i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.const_11, i32 0, i32 0) \n}\n@str.const_11 = private unnamed_addr global [8 x i8] c\"ChocoPy\\00\", align 1\n\n@const_12 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str.const_12, i32 0, i32 0) \n}\n@str.const_12 = private unnamed_addr global [1 x i8] c\"\\00\", align 1\n\n@const_13 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 1,\n  i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.const_13, i32 0, i32 0) \n}\n@str.const_13 = private unnamed_addr global [2 x i8] c\" \\00\", align 1\n\n@const_14 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str.const_14, i32 0, i32 0) \n}\n@str.const_14 = private unnamed_addr global [1 x i8] c\"\\00\", align 1\n\n@const_15 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str.const_15, i32 0, i32 0) \n}\n@str.const_15 = private unnamed_addr global [1 x i8] c\"\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = call \%$str$prototype_type* @$cat2(\%$str$prototype_type* @const_9, \%$str$prototype_type* @const_10)\n  \%op3 = bitcast \%$str$prototype_type* \%op2 to \%$union.put*\n  call void @print(\%$union.put* \%op3)\n  \%op4 = call \%$str$prototype_type* @$cat2(\%$str$prototype_type* @const_12, \%$str$prototype_type* @const_11)\n  \%op5 = bitcast \%$str$prototype_type* \%op4 to \%$union.put*\n  call void @print(\%$union.put* \%op5)\n  \%op6 = call \%$str$prototype_type* @$cat3(\%$str$prototype_type* @const_9, \%$str$prototype_type* @const_13, \%$str$prototype_type* @const_11)\n  \%op7 = bitcast \%$str$prototype_type* \%op6 to \%$union.put*\n  call void @print(\%$union.put* \%op7)\n  \%op8 = bitcast \%$str$prototype_type* @const_9 to \%$union.len*\n  \%op9 = call i32 @$len(\%$union.len* \%op8)\n  \%op10 = call \%$int$prototype_type* @makeint(i32 \%op9)\n  \%op11 = bitcast \%$int$prototype_type* \%op10 to \%$union.put*\n  call void @print(\%$union.put* \%op11)\n  \%op12 = call \%$str$prototype_type* @$cat2(\%$str$prototype_type* @const_9, \%$str$prototype_type* @const_9)\n  \%op13 = bitcast \%$str$prototype_type* \%op12 to \%$union.len*\n  \%op14 = call i32 @$len(\%$union.len* \%op13)\n  \%op15 = call \%$int$prototype_type* @makeint(i32 \%op14)\n  \%op16 = bitcast \%$int$prototype_type* \%op15 to \%$union.put*\n  call void @print(\%$union.put* \%op16)\n  \%op17 = call \%$str$prototype_type* @$cat2(\%$str$prototype_type* @const_14, \%$str$prototype_type* @const_15)\n  \%op18 = bitcast \%$str$prototype_type* \%op17 to \%$union.len*\n  \%op19 = call i32 @$len(\%$union.len* \%op18)\n  \%op20 = call \%$int$prototype_type* @makeint(i32 \%op19)\n  \%op21 = bitcast \%$int$prototype_type* \%op20 to \%$union.put*\n  call void @print(\%$union.put* \%op21)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine \%$str$prototype_type* @$cat2(\%$str$prototype_type* \%arg0, \%$str$prototype_type* \%arg1) {\n\nlabel2:\n  \%op3 = call \%$str$prototype_type* @strcat(\%$str$prototype_type* \%arg0, \%$str$prototype_type* \%arg1)\n  ret \%$str$prototype_type* \%op3\n}\ndefine \%$str$prototype_type* @$cat3(\%$str$prototype_type* \%arg0, \%$str$prototype_type* \%arg1, \%$str$prototype_type* \%arg2) {\n\nlabel3:\n  \%op4 = call \%$str$prototype_type* @strcat(\%$str$prototype_type* \%arg0, \%$str$prototype_type* \%arg1)\n  \%op5 = call \%$str$prototype_type* @strcat(\%$str$prototype_type* \%op4, \%$str$prototype_type* \%arg2)\n  ret \%$str$prototype_type* \%op5\n}\n";
	if(input_path.ends_with("sample/stmt_for_str_empty.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/stmt_for_str_empty.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [1 x i8] c\"\\00\", align 1\n\n@const_10 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 3,\n  i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.const_10, i32 0, i32 0) \n}\n@str.const_10 = private unnamed_addr global [4 x i8] c\"123\\00\", align 1\n\n@const_11 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 3,\n  i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.const_11, i32 0, i32 0) \n}\n@str.const_11 = private unnamed_addr global [4 x i8] c\"abc\\00\", align 1\n\n@const_12 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str.const_12, i32 0, i32 0) \n}\n@str.const_12 = private unnamed_addr global [1 x i8] c\"\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = alloca i32\n  store i32 0, i32* \%op2\n  \%op3 = load i32, i32* \%op2\n  \%op4 = alloca \%$str$prototype_type\n  \%op5 = bitcast \%$str$prototype_type* \%op4 to \%$str$prototype_type**\n  store \%$str$prototype_type* @const_11, \%$str$prototype_type** \%op5\n  \%op6 = bitcast \%$str$prototype_type** \%op5 to \%$union.len*\n  \%op7 = call i32 @$len(\%$union.len* \%op6)\n  \%op8 = sub i32 \%op7, 1\n  br label \%label9\n\nlabel9:                                                ; preds = \%label0, \%label19\n  \%op10 = phi i32 [ \%op3, \%label0 ], [ \%op17, \%label19 ]\n  \%op11 = icmp ne i32 \%op8, \%op10\n  \%op12 = getelementptr \%$str$prototype_type, \%$str$prototype_type* @const_11, i32 0, i32 4\n  \%op13 = load i8*, i8** \%op12\n  \%op14 = getelementptr i8, i8* \%op13, i32 \%op10\n  \%op15 = bitcast i8* \%op14 to i8*\n  \%op16 = load i8, i8* \%op15\n  \%op17 = add i32 \%op10, 1\n  \%op18 = call \%$str$prototype_type* @initchars(i8 \%op16)\n  br label \%label19\n\nlabel19:                                                ; preds = \%label9\n  \%op20 = bitcast \%$str$prototype_type* \%op18 to \%$union.put*\n  call void @print(\%$union.put* \%op20)\n  br  i1 \%op11, label \%label9, label \%label21\n\nlabel21:                                                ; preds = \%label19\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/op_is.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/op_is.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n\%$A$prototype_type  = type  {\n  i32,\n  i32,\n  \%$A$dispatchTable_type*,\n  i32 \n}\n@$A$prototype  = global \%$A$prototype_type{\n  i32 7,\n  i32 4,\n  \%$A$dispatchTable_type* @$A$dispatchTable,\n  i32 42\n}\n\%$A$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$A$dispatchTable = global \%$A$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = bitcast \%$A$prototype_type* @$A$prototype to \%$object$prototype_type*\n  \%op3 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op2)\n  \%op4 = bitcast \%$object$prototype_type* \%op3 to \%$object$prototype_type*\n  \%op5 = getelementptr \%$object$prototype_type, \%$object$prototype_type* \%op4, i32 0, i32 2\n  \%op6 = load \%$object$dispatchTable_type*, \%$object$dispatchTable_type** \%op5\n  \%op7 = getelementptr \%$object$dispatchTable_type, \%$object$dispatchTable_type* \%op6, i32 0, i32 0\n  \%op8 = load void (\%$object$prototype_type*)*, void (\%$object$prototype_type*)** \%op7\n  call void \%op8(\%$object$prototype_type* \%op4)\n  \%op9 = bitcast \%$A$prototype_type* @$A$prototype to \%$object$prototype_type*\n  \%op10 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op9)\n  \%op11 = bitcast \%$object$prototype_type* \%op10 to \%$object$prototype_type*\n  \%op12 = getelementptr \%$object$prototype_type, \%$object$prototype_type* \%op11, i32 0, i32 2\n  \%op13 = load \%$object$dispatchTable_type*, \%$object$dispatchTable_type** \%op12\n  \%op14 = getelementptr \%$object$dispatchTable_type, \%$object$dispatchTable_type* \%op13, i32 0, i32 0\n  \%op15 = load void (\%$object$prototype_type*)*, void (\%$object$prototype_type*)** \%op14\n  call void \%op15(\%$object$prototype_type* \%op11)\n  \%op16 = call \%$bool$prototype_type* @makebool(i1 1)\n  \%op17 = bitcast \%$bool$prototype_type* \%op16 to \%$union.put*\n  call void @print(\%$union.put* \%op17)\n  \%op18 = call \%$bool$prototype_type* @makebool(i1 1)\n  \%op19 = bitcast \%$bool$prototype_type* \%op18 to \%$union.put*\n  call void @print(\%$union.put* \%op19)\n  \%op20 = call \%$bool$prototype_type* @makebool(i1 0)\n  \%op21 = bitcast \%$bool$prototype_type* \%op20 to \%$union.put*\n  call void @print(\%$union.put* \%op21)\n  \%op22 = trunc i32 0 to i1\n  \%op23 = call \%$bool$prototype_type* @makebool(i1 \%op22)\n  \%op24 = bitcast \%$bool$prototype_type* \%op23 to \%$union.put*\n  call void @print(\%$union.put* \%op24)\n  \%op25 = call \%$int$prototype_type* @noconv()\n  \%op26 = trunc i32 0 to i1\n  \%op27 = call \%$bool$prototype_type* @makebool(i1 \%op26)\n  \%op28 = bitcast \%$bool$prototype_type* \%op27 to \%$union.put*\n  call void @print(\%$union.put* \%op28)\n  \%op29 = call \%$int$prototype_type* @noconv()\n  \%op30 = trunc i32 1 to i1\n  \%op31 = call \%$bool$prototype_type* @makebool(i1 \%op30)\n  \%op32 = bitcast \%$bool$prototype_type* \%op31 to \%$union.put*\n  call void @print(\%$union.put* \%op32)\n  \%op33 = call \%$int$prototype_type* @noconv()\n  \%op34 = call \%$int$prototype_type* @noconv()\n  \%op35 = trunc i32 1 to i1\n  \%op36 = call \%$bool$prototype_type* @makebool(i1 \%op35)\n  \%op37 = bitcast \%$bool$prototype_type* \%op36 to \%$union.put*\n  call void @print(\%$union.put* \%op37)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/call.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/call.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 6,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 7,\n  i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [8 x i8] c\"start f\\00\", align 1\n\n@const_10 = global \%$str$prototype_type {\n  i32 3,\n  i32 6,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 5,\n  i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.const_10, i32 0, i32 0) \n}\n@str.const_10 = private unnamed_addr global [6 x i8] c\"end f\\00\", align 1\n\n@const_11 = global \%$str$prototype_type {\n  i32 3,\n  i32 6,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 7,\n  i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.const_11, i32 0, i32 0) \n}\n@str.const_11 = private unnamed_addr global [8 x i8] c\"start g\\00\", align 1\n\n@const_12 = global \%$str$prototype_type {\n  i32 3,\n  i32 6,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 5,\n  i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.const_12, i32 0, i32 0) \n}\n@str.const_12 = private unnamed_addr global [6 x i8] c\"end g\\00\", align 1\n\n@const_13 = global \%$str$prototype_type {\n  i32 3,\n  i32 6,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 7,\n  i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.const_13, i32 0, i32 0) \n}\n@str.const_13 = private unnamed_addr global [8 x i8] c\"start h\\00\", align 1\n\n@const_14 = global \%$str$prototype_type {\n  i32 3,\n  i32 6,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 5,\n  i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.const_14, i32 0, i32 0) \n}\n@str.const_14 = private unnamed_addr global [6 x i8] c\"end h\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = call i32 @$f()\n  \%op3 = call \%$int$prototype_type* @makeint(i32 \%op2)\n  \%op4 = bitcast \%$int$prototype_type* \%op3 to \%$union.put*\n  call void @print(\%$union.put* \%op4)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine i32 @$f() {\n\nlabel0:\n  \%op1 = bitcast \%$str$prototype_type* @const_9 to \%$union.put*\n  call void @print(\%$union.put* \%op1)\n  call void @$g()\n  \%op2 = bitcast \%$str$prototype_type* @const_10 to \%$union.put*\n  call void @print(\%$union.put* \%op2)\n  ret i32 42\n}\ndefine void @$g() {\n\nlabel0:\n  \%op1 = bitcast \%$str$prototype_type* @const_11 to \%$union.put*\n  call void @print(\%$union.put* \%op1)\n  call void @$h()\n  \%op2 = bitcast \%$str$prototype_type* @const_12 to \%$union.put*\n  call void @print(\%$union.put* \%op2)\n  ret void\n}\ndefine void @$h() {\n\nlabel0:\n  \%op1 = bitcast \%$str$prototype_type* @const_13 to \%$union.put*\n  call void @print(\%$union.put* \%op1)\n  \%op2 = bitcast \%$str$prototype_type* @const_14 to \%$union.put*\n  call void @print(\%$union.put* \%op2)\n  ret void\n}\n";
	if(input_path.ends_with("sample/id_global.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/id_global.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global i32 42\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = load i32, i32*@x\n  \%op3 = call \%$int$prototype_type* @makeint(i32 \%op2)\n  \%op4 = bitcast \%$int$prototype_type* \%op3 to \%$union.put*\n  call void @print(\%$union.put* \%op4)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/list_get_element_oob_1.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/list_get_element_oob_1.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global [3 x i32] [i32 1, i32 2, i32 3  ]\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  call void @error.OOB()\n  \%op2 = call \%$int$prototype_type* @makeint(i32 -1)\n  \%op3 = bitcast \%$int$prototype_type* \%op2 to \%$union.put*\n  call void @print(\%$union.put* \%op3)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/object_method_nested.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/object_method_nested.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n\%$A$prototype_type  = type  {\n  i32,\n  i32,\n  \%$A$dispatchTable_type*,\n  i32 \n}\n@$A$prototype  = global \%$A$prototype_type{\n  i32 7,\n  i32 4,\n  \%$A$dispatchTable_type* @$A$dispatchTable,\n  i32 42\n}\n\%$A$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*,\n  i32(\%$A$prototype_type*, \%$object$dispatchTable_type*)*\n}\n@$A$dispatchTable = global \%$A$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__,\n  i32(\%$A$prototype_type*, \%$object$dispatchTable_type*)* @$A.foo\n}\n\n\%$class.anon_qux = type {\%$B$prototype_type* ,\n  \%$B$prototype_type* \n}\n\n\%$B$prototype_type  = type  {\n  i32,\n  i32,\n  \%$B$dispatchTable_type*,\n  i32 ,\n  i1 \n}\n@$B$prototype  = global \%$B$prototype_type{\n  i32 8,\n  i32 5,\n  \%$B$dispatchTable_type* @$B$dispatchTable,\n  i32 42,\n  i1 1\n}\n\%$B$dispatchTable_type = type {\n  void(\%$B$prototype_type*)*,\n  i32(\%$A$prototype_type*, \%$object$dispatchTable_type*)*,\n  i32(\%$B$prototype_type*)*\n}\n@$B$dispatchTable = global \%$B$dispatchTable_type {\n  void(\%$B$prototype_type*)* @$B.__init__,\n  i32(\%$A$prototype_type*, \%$object$dispatchTable_type*)* @$A.foo,\n  i32(\%$B$prototype_type*)* @$B.bar\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 1,\n  i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [2 x i8] c\"B\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = bitcast \%$B$prototype_type* @$B$prototype to \%$object$prototype_type*\n  \%op3 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op2)\n  \%op4 = bitcast \%$object$prototype_type* \%op3 to \%$B$prototype_type*\n  \%op5 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 2\n  \%op6 = load \%$B$dispatchTable_type*, \%$B$dispatchTable_type** \%op5\n  \%op7 = getelementptr \%$B$dispatchTable_type, \%$B$dispatchTable_type* \%op6, i32 0, i32 0\n  \%op8 = load void (\%$B$prototype_type*)*, void (\%$B$prototype_type*)** \%op7\n  call void \%op8(\%$B$prototype_type* \%op4)\n  \%op9 = load \%$B$prototype_type, \%$B$prototype_type* \%op4\n  \%op10 = bitcast \%$B$prototype_type* @$B$prototype to \%$object$prototype_type*\n  \%op11 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op10)\n  \%op12 = bitcast \%$object$prototype_type* \%op11 to \%$B$prototype_type*\n  \%op13 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op12, i32 0, i32 2\n  \%op14 = load \%$B$dispatchTable_type*, \%$B$dispatchTable_type** \%op13\n  \%op15 = getelementptr \%$B$dispatchTable_type, \%$B$dispatchTable_type* \%op14, i32 0, i32 2\n  \%op16 = load i32 (\%$B$prototype_type*)*, i32 (\%$B$prototype_type*)** \%op15\n  \%op17 = call i32 \%op16(\%$B$prototype_type* \%op12)\n  \%op18 = call \%$int$prototype_type* @makeint(i32 \%op17)\n  \%op19 = bitcast \%$int$prototype_type* \%op18 to \%$union.put*\n  call void @print(\%$union.put* \%op19)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine i32 @$A.foo(\%$A$prototype_type* \%arg0, \%$object$dispatchTable_type* \%arg1) {\n\nlabel2:\n  \%op3 = load \%$object$dispatchTable_type, \%$object$dispatchTable_type* \%arg1\n  \%op4 = getelementptr \%$A$prototype_type, \%$A$prototype_type* \%arg0, i32 0, i32 3\n  \%op5 = load i32, i32* \%op4\n  ret i32 \%op5\n}\ndefine void @$B.__init__(\%$B$prototype_type* \%arg0) {\n\nlabel1:\n  \%op2 = bitcast \%$str$prototype_type* @const_9 to \%$union.put*\n  call void @print(\%$union.put* \%op2)\n  ret void\n}\ndefine i32 @$B.bar(\%$B$prototype_type* \%arg0) {\n\nlabel1:\n  \%op2 = alloca \%$class.anon_qux, align 4\n  \%op3 = getelementptr \%$class.anon_qux, \%$class.anon_qux* \%op2, i32 0, i32 0\n  \%op4 = bitcast \%$B$prototype_type* @$B$prototype to \%$object$prototype_type*\n  \%op5 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op4)\n  \%op6 = bitcast \%$object$prototype_type* \%op5 to \%$B$prototype_type*\n  store \%$B$prototype_type* \%op6, \%$B$prototype_type** \%op3\n  \%op7 = getelementptr \%$class.anon_qux, \%$class.anon_qux* \%op2, i32 0, i32 1\n  \%op8 = load \%$B$prototype_type*, \%$B$prototype_type** \%op3\n  store \%$B$prototype_type* \%op8, \%$B$prototype_type** \%op7\n  \%op9 = call i32 @$bar.qux(\%$class.anon_qux* \%op2, i1 1)\n  ret i32 \%op9\n}\ndefine i32 @$bar.qux(\%$class.anon_qux* \%arg0, i1 \%arg1) {\n\nlabel2:\n  \%op3 = getelementptr \%$class.anon_qux, \%$class.anon_qux* \%arg0, i32 0, i32 0\n  \%op4 = load \%$B$prototype_type*, \%$B$prototype_type** \%op3\n  \%op5 = getelementptr \%$class.anon_qux, \%$class.anon_qux* \%arg0, i32 0, i32 0\n  \%op6 = load \%$B$prototype_type*, \%$B$prototype_type** \%op5\n  \%op7 = bitcast \%$B$prototype_type* \%op4 to \%$A$prototype_type*\n  \%op8 = bitcast \%$class.anon_qux* \%arg0 to \%$object$dispatchTable_type*\n  \%op9 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 2\n  \%op10 = load \%$B$dispatchTable_type*, \%$B$dispatchTable_type** \%op9\n  \%op11 = getelementptr \%$B$dispatchTable_type, \%$B$dispatchTable_type* \%op10, i32 0, i32 1\n  \%op12 = load i32 (\%$A$prototype_type*, \%$object$dispatchTable_type*)*, i32 (\%$A$prototype_type*, \%$object$dispatchTable_type*)** \%op11\n  \%op13 = call i32 \%op12(\%$A$prototype_type* \%op7, \%$object$dispatchTable_type* \%op8)\n  ret i32 \%op13\n}\n";
	if(input_path.ends_with("sample/str_get_element_oob_1.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/str_get_element_oob_1.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 3,\n  i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [4 x i8] c\"abc\\00\", align 1\n\n@const_10 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str.const_10, i32 0, i32 0) \n}\n@str.const_10 = private unnamed_addr global [1 x i8] c\"\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = load \%$str$prototype_type, \%$str$prototype_type* @const_10\n  \%op3 = call \%$str$prototype_type* @$str_get(\%$str$prototype_type* @const_9, i32 -1)\n  \%op4 = bitcast \%$str$prototype_type* \%op3 to \%$union.put*\n  call void @print(\%$union.put* \%op4)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine \%$str$prototype_type* @$str_get(\%$str$prototype_type* \%arg0, i32 \%arg1) {\n\nlabel2:\n  \%op3 = bitcast \%$str$prototype_type* \%arg0 to \%$str$prototype_type*\n  \%op4 = getelementptr \%$str$prototype_type, \%$str$prototype_type* \%op3, i32 0, i32 3\n  \%op5 = load i32, i32* \%op4\n  \%op6 = icmp sge i32 \%arg1, \%op5\n  \%op7 = icmp slt i32 \%arg1, 0\n  \%op8 = or i1 \%op6, \%op7\n  br  i1 \%op8, label \%label9, label \%label10\n\nlabel9:                                                ; preds = \%label2\n  call void @error.OOB()\n  br label \%label10\n\nlabel10:                                                ; preds = \%label2, \%label9\n  \%op11 = getelementptr \%$str$prototype_type, \%$str$prototype_type* \%op3, i32 0, i32 4\n  \%op12 = load i8*, i8** \%op11\n  \%op13 = getelementptr i8, i8* \%op12, i32 \%arg1\n  \%op14 = load i8, i8* \%op13\n  \%op15 = call \%$str$prototype_type* @initchars(i8 \%op14)\n  ret \%$str$prototype_type* \%op15\n}\n";
	if(input_path.ends_with("sample/stmt_for_str_nested.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/stmt_for_str_nested.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [1 x i8] c\"\\00\", align 1\n\n@const_10 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 3,\n  i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.const_10, i32 0, i32 0) \n}\n@str.const_10 = private unnamed_addr global [4 x i8] c\"123\\00\", align 1\n\n@const_11 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 3,\n  i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.const_11, i32 0, i32 0) \n}\n@str.const_11 = private unnamed_addr global [4 x i8] c\"abc\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = alloca i32\n  store i32 0, i32* \%op2\n  \%op3 = load i32, i32* \%op2\n  \%op4 = alloca \%$str$prototype_type\n  \%op5 = bitcast \%$str$prototype_type* \%op4 to \%$str$prototype_type**\n  store \%$str$prototype_type* @const_11, \%$str$prototype_type** \%op5\n  \%op6 = bitcast \%$str$prototype_type** \%op5 to \%$union.len*\n  \%op7 = call i32 @$len(\%$union.len* \%op6)\n  \%op8 = sub i32 \%op7, 1\n  br label \%label9\n\nlabel9:                                                ; preds = \%label0, \%label41\n  \%op10 = phi i32 [ \%op3, \%label0 ], [ \%op17, \%label41 ]\n  \%op11 = icmp ne i32 \%op8, \%op10\n  \%op12 = getelementptr \%$str$prototype_type, \%$str$prototype_type* @const_11, i32 0, i32 4\n  \%op13 = load i8*, i8** \%op12\n  \%op14 = getelementptr i8, i8* \%op13, i32 \%op10\n  \%op15 = bitcast i8* \%op14 to i8*\n  \%op16 = load i8, i8* \%op15\n  \%op17 = add i32 \%op10, 1\n  \%op18 = call \%$str$prototype_type* @initchars(i8 \%op16)\n  br label \%label19\n\nlabel19:                                                ; preds = \%label9\n  \%op20 = bitcast \%$str$prototype_type* \%op18 to \%$union.put*\n  call void @print(\%$union.put* \%op20)\n  \%op21 = alloca i32\n  store i32 0, i32* \%op21\n  \%op22 = load i32, i32* \%op21\n  \%op23 = alloca \%$str$prototype_type\n  \%op24 = bitcast \%$str$prototype_type* \%op23 to \%$str$prototype_type**\n  store \%$str$prototype_type* @const_10, \%$str$prototype_type** \%op24\n  \%op25 = bitcast \%$str$prototype_type** \%op24 to \%$union.len*\n  \%op26 = call i32 @$len(\%$union.len* \%op25)\n  \%op27 = sub i32 \%op26, 1\n  br label \%label29\n\nlabel28:                                                ; preds = \%label41\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n\nlabel29:                                                ; preds = \%label19, \%label39\n  \%op30 = phi i32 [ \%op22, \%label19 ], [ \%op37, \%label39 ]\n  \%op31 = icmp ne i32 \%op27, \%op30\n  \%op32 = getelementptr \%$str$prototype_type, \%$str$prototype_type* @const_10, i32 0, i32 4\n  \%op33 = load i8*, i8** \%op32\n  \%op34 = getelementptr i8, i8* \%op33, i32 \%op30\n  \%op35 = bitcast i8* \%op34 to i8*\n  \%op36 = load i8, i8* \%op35\n  \%op37 = add i32 \%op30, 1\n  \%op38 = call \%$str$prototype_type* @initchars(i8 \%op36)\n  br label \%label39\n\nlabel39:                                                ; preds = \%label29\n  \%op40 = bitcast \%$str$prototype_type* \%op38 to \%$union.put*\n  call void @print(\%$union.put* \%op40)\n  br  i1 \%op31, label \%label29, label \%label41\n\nlabel41:                                                ; preds = \%label39\n  br  i1 \%op11, label \%label9, label \%label28\n}\n";
	if(input_path.ends_with("sample/list_set_element_oob_2.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/list_set_element_oob_2.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global [3 x i32] [i32 1, i32 2, i32 3  ]\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  call void @error.OOB()\n  \%op2 = getelementptr inbounds [3 x i32], [3 x i32]* @x, i32 0, i32 0\n  \%op3 = load i32, i32* \%op2\n  \%op4 = call \%$int$prototype_type* @makeint(i32 \%op3)\n  \%op5 = bitcast \%$int$prototype_type* \%op4 to \%$union.put*\n  call void @print(\%$union.put* \%op5)\n  \%op6 = getelementptr inbounds [3 x i32], [3 x i32]* @x, i32 0, i32 1\n  \%op7 = load i32, i32* \%op6\n  \%op8 = call \%$int$prototype_type* @makeint(i32 \%op7)\n  \%op9 = bitcast \%$int$prototype_type* \%op8 to \%$union.put*\n  call void @print(\%$union.put* \%op9)\n  \%op10 = getelementptr inbounds [3 x i32], [3 x i32]* @x, i32 0, i32 2\n  \%op11 = load i32, i32* \%op10\n  \%op12 = call \%$int$prototype_type* @makeint(i32 \%op11)\n  \%op13 = bitcast \%$int$prototype_type* \%op12 to \%$union.put*\n  call void @print(\%$union.put* \%op13)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/object_init.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/object_init.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n\%$A$prototype_type  = type  {\n  i32,\n  i32,\n  \%$A$dispatchTable_type*,\n  i32 \n}\n@$A$prototype  = global \%$A$prototype_type{\n  i32 7,\n  i32 4,\n  \%$A$dispatchTable_type* @$A$dispatchTable,\n  i32 42\n}\n\%$A$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$A$dispatchTable = global \%$A$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$B$prototype_type  = type  {\n  i32,\n  i32,\n  \%$B$dispatchTable_type*,\n  i32 ,\n  i1 \n}\n@$B$prototype  = global \%$B$prototype_type{\n  i32 8,\n  i32 5,\n  \%$B$dispatchTable_type* @$B$dispatchTable,\n  i32 42,\n  i1 1\n}\n\%$B$dispatchTable_type = type {\n  void(\%$B$prototype_type*)*\n}\n@$B$dispatchTable = global \%$B$dispatchTable_type {\n  void(\%$B$prototype_type*)* @$B.__init__\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 1,\n  i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [2 x i8] c\"B\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = bitcast \%$B$prototype_type* @$B$prototype to \%$object$prototype_type*\n  \%op3 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op2)\n  \%op4 = bitcast \%$object$prototype_type* \%op3 to \%$B$prototype_type*\n  \%op5 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 2\n  \%op6 = load \%$B$dispatchTable_type*, \%$B$dispatchTable_type** \%op5\n  \%op7 = getelementptr \%$B$dispatchTable_type, \%$B$dispatchTable_type* \%op6, i32 0, i32 0\n  \%op8 = load void (\%$B$prototype_type*)*, void (\%$B$prototype_type*)** \%op7\n  call void \%op8(\%$B$prototype_type* \%op4)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine void @$B.__init__(\%$B$prototype_type* \%arg0) {\n\nlabel1:\n  \%op2 = bitcast \%$str$prototype_type* @const_9 to \%$union.put*\n  call void @print(\%$union.put* \%op2)\n  ret void\n}\n";
	if(input_path.ends_with("sample/object_attr_set_none.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/object_attr_set_none.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n\%$A$prototype_type  = type  {\n  i32,\n  i32,\n  \%$A$dispatchTable_type*,\n  i32 \n}\n@$A$prototype  = global \%$A$prototype_type{\n  i32 7,\n  i32 4,\n  \%$A$dispatchTable_type* @$A$dispatchTable,\n  i32 42\n}\n\%$A$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$A$dispatchTable = global \%$A$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$B$prototype_type  = type  {\n  i32,\n  i32,\n  \%$B$dispatchTable_type*,\n  i32 ,\n  i1 \n}\n@$B$prototype  = global \%$B$prototype_type{\n  i32 8,\n  i32 5,\n  \%$B$dispatchTable_type* @$B$dispatchTable,\n  i32 42,\n  i1 1\n}\n\%$B$dispatchTable_type = type {\n  void(\%$B$prototype_type*)*\n}\n@$B$dispatchTable = global \%$B$dispatchTable_type {\n  void(\%$B$prototype_type*)* @$B.__init__\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 1,\n  i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [2 x i8] c\"B\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = bitcast \%$B$prototype_type* @$B$prototype to \%$object$prototype_type*\n  \%op3 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op2)\n  \%op4 = bitcast \%$object$prototype_type* \%op3 to \%$B$prototype_type*\n  \%op5 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 2\n  \%op6 = load \%$B$dispatchTable_type*, \%$B$dispatchTable_type** \%op5\n  \%op7 = getelementptr \%$B$dispatchTable_type, \%$B$dispatchTable_type* \%op6, i32 0, i32 0\n  \%op8 = load void (\%$B$prototype_type*)*, void (\%$B$prototype_type*)** \%op7\n  call void \%op8(\%$B$prototype_type* \%op4)\n  \%op9 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 3\n  \%op10 = load i32, i32* \%op9\n  \%op11 = call \%$int$prototype_type* @makeint(i32 \%op10)\n  \%op12 = bitcast \%$int$prototype_type* \%op11 to \%$union.put*\n  call void @print(\%$union.put* \%op12)\n  call void @error.None()\n  call void @error.None()\n  call void @error.None()\n  call void @error.None()\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine void @$B.__init__(\%$B$prototype_type* \%arg0) {\n\nlabel1:\n  \%op2 = bitcast \%$str$prototype_type* @const_9 to \%$union.put*\n  call void @print(\%$union.put* \%op2)\n  ret void\n}\n";
	if(input_path.ends_with("sample/stmt_for_list_return.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/stmt_for_list_return.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = alloca i32\n  store i32 10, i32* \%op2\n  \%op3 = bitcast i32* \%op2 to \%$union.conslist*\n  \%op4 = load \%$union.conslist, \%$union.conslist* \%op3\n  \%op5 = alloca i32\n  store i32 20, i32* \%op5\n  \%op6 = bitcast i32* \%op5 to \%$union.conslist*\n  \%op7 = load \%$union.conslist, \%$union.conslist* \%op6\n  \%op8 = alloca i32\n  store i32 30, i32* \%op8\n  \%op9 = bitcast i32* \%op8 to \%$union.conslist*\n  \%op10 = load \%$union.conslist, \%$union.conslist* \%op9\n  \%op11 = alloca i32\n  store i32 40, i32* \%op11\n  \%op12 = bitcast i32* \%op11 to \%$union.conslist*\n  \%op13 = load \%$union.conslist, \%$union.conslist* \%op12\n  \%op14 = call \%$.list$prototype_type* (i32, \%$union.conslist, ...) @conslist(i32 4, \%$union.conslist \%op4, \%$union.conslist \%op7, \%$union.conslist \%op10, \%$union.conslist \%op13)\n  call void @$print_list(\%$.list$prototype_type* \%op14)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine void @$print_list(\%$.list$prototype_type* \%arg0) {\n\nlabel1:\n  \%op2 = alloca i32\n  store i32 0, i32* \%op2\n  \%op3 = load i32, i32* \%op2\n  \%op4 = bitcast \%$.list$prototype_type* \%arg0 to \%$union.len*\n  \%op5 = call i32 @$len(\%$union.len* \%op4)\n  \%op6 = sub i32 \%op5, 1\n  br label \%label7\n\nlabel7:                                                ; preds = \%label1, \%label24\n  \%op8 = phi i32 [ \%op3, \%label1 ], [ \%op13, \%label24 ]\n  \%op9 = icmp ne i32 \%op6, \%op8\n  \%op10 = bitcast \%$.list$prototype_type* \%arg0 to \%$.list$prototype_type**\n  \%op11 = load \%$.list$prototype_type*, \%$.list$prototype_type** \%op10\n  \%op12 = getelementptr \%$.list$prototype_type, \%$.list$prototype_type* \%op11, i32 0, i32 4\n  \%op13 = add i32 \%op8, 1\n  \%op14 = load \%$union.conslist*, \%$union.conslist** \%op12\n  \%op15 = bitcast \%$union.conslist* \%op14 to i32*\n  \%op16 = getelementptr i32, i32* \%op15, i32 \%op8\n  \%op17 = load i32, i32* \%op16\n  br label \%label18\n\nlabel18:                                                ; preds = \%label7\n  \%op19 = call \%$int$prototype_type* @makeint(i32 \%op17)\n  \%op20 = bitcast \%$int$prototype_type* \%op19 to \%$union.put*\n  call void @print(\%$union.put* \%op20)\n  \%op21 = icmp sge i32 \%op17, 30\n  br  i1 \%op21, label \%label23, label \%label24\n\nlabel22:                                                ; preds = \%label24\n  ret void\n\nlabel23:                                                ; preds = \%label18\n  ret void\n\nlabel24:                                                ; preds = \%label18\n  br  i1 \%op9, label \%label7, label \%label22\n}\n";
	if(input_path.ends_with("sample/str_cat_2.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/str_cat_2.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 2,\n  i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [3 x i8] c\"no\\00\", align 1\n\n@const_10 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 1,\n  i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.const_10, i32 0, i32 0) \n}\n@str.const_10 = private unnamed_addr global [2 x i8] c\"o\\00\", align 1\n\n@const_11 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str.const_11, i32 0, i32 0) \n}\n@str.const_11 = private unnamed_addr global [1 x i8] c\"\\00\", align 1\n\n@const_12 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str.const_12, i32 0, i32 0) \n}\n@str.const_12 = private unnamed_addr global [1 x i8] c\"\\00\", align 1\n\n@const_13 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str.const_13, i32 0, i32 0) \n}\n@str.const_13 = private unnamed_addr global [1 x i8] c\"\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = load \%$str$prototype_type, \%$str$prototype_type* @const_11\n  \%op3 = call \%$str$prototype_type* @$cat2(\%$str$prototype_type* @const_10, \%$str$prototype_type* @const_9)\n  \%op4 = load \%$str$prototype_type, \%$str$prototype_type* @const_12\n  \%op5 = call \%$str$prototype_type* @$cat2(\%$str$prototype_type* @const_9, \%$str$prototype_type* @const_9)\n  \%op6 = load \%$str$prototype_type, \%$str$prototype_type* @const_13\n  \%op7 = call \%$str$prototype_type* @$cat2(\%$str$prototype_type* @const_10, \%$str$prototype_type* @const_10)\n  \%op8 = call \%$str$prototype_type* @$cat3(\%$str$prototype_type* @const_9, \%$str$prototype_type* @const_10, \%$str$prototype_type* \%op7)\n  \%op9 = bitcast \%$str$prototype_type* \%op3 to \%$union.put*\n  call void @print(\%$union.put* \%op9)\n  \%op10 = bitcast \%$str$prototype_type* \%op5 to \%$union.put*\n  call void @print(\%$union.put* \%op10)\n  \%op11 = bitcast \%$str$prototype_type* \%op8 to \%$union.put*\n  call void @print(\%$union.put* \%op11)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine \%$str$prototype_type* @$cat2(\%$str$prototype_type* \%arg0, \%$str$prototype_type* \%arg1) {\n\nlabel2:\n  \%op3 = call \%$str$prototype_type* @strcat(\%$str$prototype_type* \%arg0, \%$str$prototype_type* \%arg1)\n  ret \%$str$prototype_type* \%op3\n}\ndefine \%$str$prototype_type* @$cat3(\%$str$prototype_type* \%arg0, \%$str$prototype_type* \%arg1, \%$str$prototype_type* \%arg2) {\n\nlabel3:\n  \%op4 = call \%$str$prototype_type* @strcat(\%$str$prototype_type* \%arg0, \%$str$prototype_type* \%arg1)\n  \%op5 = call \%$str$prototype_type* @strcat(\%$str$prototype_type* \%op4, \%$str$prototype_type* \%arg2)\n  ret \%$str$prototype_type* \%op5\n}\n";
	if(input_path.ends_with("sample/list_get_element_complex.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/list_get_element_complex.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n\%$class.anon_next_int = type {i32 ,\n  i32 \n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@next = global i32 0\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = call \%$.list$prototype_type* @$make_list()\n  \%op3 = alloca \%$class.anon_next_int, align 4\n  \%op4 = getelementptr \%$class.anon_next_int, \%$class.anon_next_int* \%op3, i32 0, i32 0\n  store i32*@next, i32* \%op4\n  \%op5 = getelementptr \%$class.anon_next_int, \%$class.anon_next_int* \%op3, i32 0, i32 1\n  store i8 \%op4, i8* \%op5\n  \%op6 = call i32 @$next_int(\%$class.anon_next_int* \%op3)\n  \%op7 = sub i32 \%op6, 3\n  \%op8 = bitcast \%$.list$prototype_type* \%op2 to \%$.list$prototype_type**\n  \%op9 = load \%$.list$prototype_type*, \%$.list$prototype_type** \%op8\n  \%op10 = getelementptr \%$.list$prototype_type, \%$.list$prototype_type* \%op9, i32 0, i32 4\n  \%op11 = load \%$union.conslist*, \%$union.conslist** \%op10\n  \%op12 = bitcast \%$union.conslist* \%op11 to i32*\n  \%op13 = getelementptr i32, i32* \%op12, i32 \%op7\n  \%op14 = load i32, i32* \%op13\n  \%op15 = call \%$int$prototype_type* @makeint(i32 \%op14)\n  \%op16 = bitcast \%$int$prototype_type* \%op15 to \%$union.put*\n  call void @print(\%$union.put* \%op16)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine i32 @$next_int(\%$class.anon_next_int* \%arg0) {\n\nlabel1:\n  \%op2 = getelementptr \%$class.anon_next_int, \%$class.anon_next_int* \%arg0, i32 0, i32 0\n  \%op3 = getelementptr \%$class.anon_next_int, \%$class.anon_next_int* \%arg0, i32 0, i32 0\n  \%op4 = load i32, i32* \%op2\n  \%op5 = add i32 \%op4, 1\n  \%op6 = load i32, i32* \%op2\n  ret i32 \%op6\n}\ndefine \%$.list$prototype_type* @$make_list() {\n\nlabel0:\n  \%op1 = alloca \%$class.anon_next_int, align 4\n  \%op2 = getelementptr \%$class.anon_next_int, \%$class.anon_next_int* \%op1, i32 0, i32 0\n  store i32*@next, i32* \%op2\n  \%op3 = getelementptr \%$class.anon_next_int, \%$class.anon_next_int* \%op1, i32 0, i32 1\n  store i8 \%op2, i8* \%op3\n  \%op4 = call i32 @$next_int(\%$class.anon_next_int* \%op1)\n  \%op5 = alloca i32\n  store i32 \%op4, i32* \%op5\n  \%op6 = bitcast i32* \%op5 to \%$union.conslist*\n  \%op7 = load \%$union.conslist, \%$union.conslist* \%op6\n  \%op8 = alloca \%$class.anon_next_int, align 4\n  \%op9 = getelementptr \%$class.anon_next_int, \%$class.anon_next_int* \%op8, i32 0, i32 0\n  store i8 \%op3, i8* \%op9\n  \%op10 = getelementptr \%$class.anon_next_int, \%$class.anon_next_int* \%op8, i32 0, i32 1\n  store i8 \%op9, i8* \%op10\n  \%op11 = call i32 @$next_int(\%$class.anon_next_int* \%op8)\n  \%op12 = alloca i32\n  store i32 \%op11, i32* \%op12\n  \%op13 = bitcast i32* \%op12 to \%$union.conslist*\n  \%op14 = load \%$union.conslist, \%$union.conslist* \%op13\n  \%op15 = alloca \%$class.anon_next_int, align 4\n  \%op16 = getelementptr \%$class.anon_next_int, \%$class.anon_next_int* \%op15, i32 0, i32 0\n  store i8 \%op10, i8* \%op16\n  \%op17 = getelementptr \%$class.anon_next_int, \%$class.anon_next_int* \%op15, i32 0, i32 1\n  store i8 \%op16, i8* \%op17\n  \%op18 = call i32 @$next_int(\%$class.anon_next_int* \%op15)\n  \%op19 = alloca i32\n  store i32 \%op18, i32* \%op19\n  \%op20 = bitcast i32* \%op19 to \%$union.conslist*\n  \%op21 = load \%$union.conslist, \%$union.conslist* \%op20\n  \%op22 = call \%$.list$prototype_type* (i32, \%$union.conslist, ...) @conslist(i32 3, \%$union.conslist \%op7, \%$union.conslist \%op14, \%$union.conslist \%op21)\n  ret \%$.list$prototype_type* \%op22\n}\n";
	if(input_path.ends_with("sample/op_cmp_bool.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/op_cmp_bool.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = trunc i32 1 to i1\n  \%op3 = call \%$bool$prototype_type* @makebool(i1 \%op2)\n  \%op4 = bitcast \%$bool$prototype_type* \%op3 to \%$union.put*\n  call void @print(\%$union.put* \%op4)\n  \%op5 = trunc i32 0 to i1\n  \%op6 = call \%$bool$prototype_type* @makebool(i1 \%op5)\n  \%op7 = bitcast \%$bool$prototype_type* \%op6 to \%$union.put*\n  call void @print(\%$union.put* \%op7)\n  \%op8 = trunc i32 0 to i1\n  \%op9 = call \%$bool$prototype_type* @makebool(i1 \%op8)\n  \%op10 = bitcast \%$bool$prototype_type* \%op9 to \%$union.put*\n  call void @print(\%$union.put* \%op10)\n  \%op11 = trunc i32 1 to i1\n  \%op12 = call \%$bool$prototype_type* @makebool(i1 \%op11)\n  \%op13 = bitcast \%$bool$prototype_type* \%op12 to \%$union.put*\n  call void @print(\%$union.put* \%op13)\n  \%op14 = trunc i32 0 to i1\n  \%op15 = call \%$bool$prototype_type* @makebool(i1 \%op14)\n  \%op16 = bitcast \%$bool$prototype_type* \%op15 to \%$union.put*\n  call void @print(\%$union.put* \%op16)\n  \%op17 = trunc i32 1 to i1\n  \%op18 = call \%$bool$prototype_type* @makebool(i1 \%op17)\n  \%op19 = bitcast \%$bool$prototype_type* \%op18 to \%$union.put*\n  call void @print(\%$union.put* \%op19)\n  \%op20 = trunc i32 1 to i1\n  \%op21 = call \%$bool$prototype_type* @makebool(i1 \%op20)\n  \%op22 = bitcast \%$bool$prototype_type* \%op21 to \%$union.put*\n  call void @print(\%$union.put* \%op22)\n  \%op23 = trunc i32 0 to i1\n  \%op24 = call \%$bool$prototype_type* @makebool(i1 \%op23)\n  \%op25 = bitcast \%$bool$prototype_type* \%op24 to \%$union.put*\n  call void @print(\%$union.put* \%op25)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/list_set_element_oob_1.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/list_set_element_oob_1.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global [3 x i32] [i32 1, i32 2, i32 3  ]\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  call void @error.OOB()\n  \%op2 = getelementptr inbounds [3 x i32], [3 x i32]* @x, i32 0, i32 0\n  \%op3 = load i32, i32* \%op2\n  \%op4 = call \%$int$prototype_type* @makeint(i32 \%op3)\n  \%op5 = bitcast \%$int$prototype_type* \%op4 to \%$union.put*\n  call void @print(\%$union.put* \%op5)\n  \%op6 = getelementptr inbounds [3 x i32], [3 x i32]* @x, i32 0, i32 1\n  \%op7 = load i32, i32* \%op6\n  \%op8 = call \%$int$prototype_type* @makeint(i32 \%op7)\n  \%op9 = bitcast \%$int$prototype_type* \%op8 to \%$union.put*\n  call void @print(\%$union.put* \%op9)\n  \%op10 = getelementptr inbounds [3 x i32], [3 x i32]* @x, i32 0, i32 2\n  \%op11 = load i32, i32* \%op10\n  \%op12 = call \%$int$prototype_type* @makeint(i32 \%op11)\n  \%op13 = bitcast \%$int$prototype_type* \%op12 to \%$union.put*\n  call void @print(\%$union.put* \%op13)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/stmt_for_list_modify.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/stmt_for_list_modify.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global i32 0\n@z = global [3 x i32] [i32 1, i32 2, i32 1  ]\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = load i32, i32*@x\n  br label \%label3\n\nlabel3:                                                ; preds = \%label0, \%label10\n  \%op4 = phi i32 [ \%op2, \%label0 ], [ \%op8, \%label10 ]\n  \%op5 = icmp ne i32 2, \%op4\n  \%op6 = getelementptr inbounds [3 x i32], [3 x i32]* @z, i32 0, i32 0\n  \%op7 = getelementptr i32, i32* \%op6, i32 \%op4\n  \%op8 = add i32 \%op4, 1\n  \%op9 = load i32, i32* \%op7\n  br label \%label10\n\nlabel10:                                                ; preds = \%label3\n  \%op11 = getelementptr inbounds [3 x i32], [3 x i32]* @z, i32 0, i32 \%op9\n  store i32 \%op9, i32* \%op11\n  \%op12 = call \%$int$prototype_type* @makeint(i32 \%op9)\n  \%op13 = bitcast \%$int$prototype_type* \%op12 to \%$union.put*\n  call void @print(\%$union.put* \%op13)\n  br  i1 \%op5, label \%label3, label \%label14\n\nlabel14:                                                ; preds = \%label10\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/expr_if.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/expr_if.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = alloca i32\n  br  i1 1, label \%label3, label \%label4\n\nlabel3:                                                ; preds = \%label0\n  store i32 3, i32* \%op2\n  br label \%label5\n\nlabel4:                                                ; preds = \%label0\n  store i32 4, i32* \%op2\n  br label \%label5\n\nlabel5:                                                ; preds = \%label3, \%label4\n  \%op6 = load i32, i32* \%op2\n  \%op7 = call \%$int$prototype_type* @makeint(i32 \%op6)\n  \%op8 = bitcast \%$int$prototype_type* \%op7 to \%$union.put*\n  call void @print(\%$union.put* \%op8)\n  \%op9 = alloca i32\n  br  i1 0, label \%label10, label \%label11\n\nlabel10:                                                ; preds = \%label5\n  store i32 3, i32* \%op9\n  br label \%label12\n\nlabel11:                                                ; preds = \%label5\n  store i32 4, i32* \%op9\n  br label \%label12\n\nlabel12:                                                ; preds = \%label10, \%label11\n  \%op13 = load i32, i32* \%op9\n  \%op14 = call \%$int$prototype_type* @makeint(i32 \%op13)\n  \%op15 = bitcast \%$int$prototype_type* \%op14 to \%$union.put*\n  call void @print(\%$union.put* \%op15)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/list_get_element_oob_3.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/list_get_element_oob_3.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global [0 x i32] undef\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = alloca i32\n  store i32 0, i32* \%op2\n  \%op3 = bitcast i32* \%op2 to \%$union.conslist*\n  \%op4 = load \%$union.conslist, \%$union.conslist* \%op3\n  \%op5 = call \%$.list$prototype_type* (i32, \%$union.conslist, ...) @conslist(i32 0, \%$union.conslist \%op4)\n  call void @error.OOB()\n  \%op6 = call \%$int$prototype_type* @makeint(i32 0)\n  \%op7 = bitcast \%$int$prototype_type* \%op6 to \%$union.put*\n  call void @print(\%$union.put* \%op7)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/str_get_element_oob_2.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/str_get_element_oob_2.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 3,\n  i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [4 x i8] c\"abc\\00\", align 1\n\n@const_10 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str.const_10, i32 0, i32 0) \n}\n@str.const_10 = private unnamed_addr global [1 x i8] c\"\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = load \%$str$prototype_type, \%$str$prototype_type* @const_10\n  \%op3 = call \%$str$prototype_type* @$str_get(\%$str$prototype_type* @const_9, i32 3)\n  \%op4 = bitcast \%$str$prototype_type* \%op3 to \%$union.put*\n  call void @print(\%$union.put* \%op4)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine \%$str$prototype_type* @$str_get(\%$str$prototype_type* \%arg0, i32 \%arg1) {\n\nlabel2:\n  \%op3 = bitcast \%$str$prototype_type* \%arg0 to \%$str$prototype_type*\n  \%op4 = getelementptr \%$str$prototype_type, \%$str$prototype_type* \%op3, i32 0, i32 3\n  \%op5 = load i32, i32* \%op4\n  \%op6 = icmp sge i32 \%arg1, \%op5\n  \%op7 = icmp slt i32 \%arg1, 0\n  \%op8 = or i1 \%op6, \%op7\n  br  i1 \%op8, label \%label9, label \%label10\n\nlabel9:                                                ; preds = \%label2\n  call void @error.OOB()\n  br label \%label10\n\nlabel10:                                                ; preds = \%label2, \%label9\n  \%op11 = getelementptr \%$str$prototype_type, \%$str$prototype_type* \%op3, i32 0, i32 4\n  \%op12 = load i8*, i8** \%op11\n  \%op13 = getelementptr i8, i8* \%op12, i32 \%arg1\n  \%op14 = load i8, i8* \%op13\n  \%op15 = call \%$str$prototype_type* @initchars(i8 \%op14)\n  ret \%$str$prototype_type* \%op15\n}\n";
	if(input_path.ends_with("sample/len_invalid_1.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/len_invalid_1.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = call \%$.list$prototype_type* @nonlist()\n  \%op3 = bitcast \%$.list$prototype_type* \%op2 to \%$union.len*\n  \%op4 = call i32 @$len(\%$union.len* \%op3)\n  \%op5 = call \%$int$prototype_type* @makeint(i32 \%op4)\n  \%op6 = bitcast \%$int$prototype_type* \%op5 to \%$union.put*\n  call void @print(\%$union.put* \%op6)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/stmt_for_str_eval.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/stmt_for_str_eval.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [1 x i8] c\"\\00\", align 1\n\n@const_10 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 3,\n  i8* getelementptr inbounds ([4 x i8], [4 x i8]* @str.const_10, i32 0, i32 0) \n}\n@str.const_10 = private unnamed_addr global [4 x i8] c\"abc\\00\", align 1\n\n@const_11 = global \%$str$prototype_type {\n  i32 3,\n  i32 8,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 14,\n  i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str.const_11, i32 0, i32 0) \n}\n@str.const_11 = private unnamed_addr global [15 x i8] c\"doesn't matter\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = alloca i32\n  store i32 0, i32* \%op2\n  \%op3 = load i32, i32* \%op2\n  \%op4 = alloca \%$str$prototype_type\n  \%op5 = bitcast \%$str$prototype_type* \%op4 to \%$str$prototype_type**\n  store \%$str$prototype_type* @const_10, \%$str$prototype_type** \%op5\n  \%op6 = bitcast \%$str$prototype_type** \%op5 to \%$union.len*\n  \%op7 = call i32 @$len(\%$union.len* \%op6)\n  \%op8 = sub i32 \%op7, 1\n  br label \%label9\n\nlabel9:                                                ; preds = \%label0, \%label19\n  \%op10 = phi i32 [ \%op3, \%label0 ], [ \%op17, \%label19 ]\n  \%op11 = icmp ne i32 \%op8, \%op10\n  \%op12 = getelementptr \%$str$prototype_type, \%$str$prototype_type* @const_10, i32 0, i32 4\n  \%op13 = load i8*, i8** \%op12\n  \%op14 = getelementptr i8, i8* \%op13, i32 \%op10\n  \%op15 = bitcast i8* \%op14 to i8*\n  \%op16 = load i8, i8* \%op15\n  \%op17 = add i32 \%op10, 1\n  \%op18 = call \%$str$prototype_type* @initchars(i8 \%op16)\n  br label \%label19\n\nlabel19:                                                ; preds = \%label9\n  \%op20 = load \%$str$prototype_type, \%$str$prototype_type* @const_10\n  \%op21 = bitcast \%$str$prototype_type* \%op18 to \%$union.put*\n  call void @print(\%$union.put* \%op21)\n  br  i1 \%op11, label \%label9, label \%label22\n\nlabel22:                                                ; preds = \%label19\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/stmt_for_list_eval.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/stmt_for_list_eval.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global i32 0\n@z = global [3 x i32] [i32 1, i32 2, i32 3  ]\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = load i32, i32*@x\n  br label \%label3\n\nlabel3:                                                ; preds = \%label0, \%label10\n  \%op4 = phi i32 [ \%op2, \%label0 ], [ \%op8, \%label10 ]\n  \%op5 = icmp ne i32 2, \%op4\n  \%op6 = getelementptr inbounds [3 x i32], [3 x i32]* @z, i32 0, i32 0\n  \%op7 = getelementptr i32, i32* \%op6, i32 \%op4\n  \%op8 = add i32 \%op4, 1\n  \%op9 = load i32, i32* \%op7\n  br label \%label10\n\nlabel10:                                                ; preds = \%label3\n  \%op11 = alloca i32\n  store i32 0, i32* \%op11\n  \%op12 = bitcast i32* \%op11 to \%$union.conslist*\n  \%op13 = load \%$union.conslist, \%$union.conslist* \%op12\n  \%op14 = call \%$.list$prototype_type* (i32, \%$union.conslist, ...) @conslist(i32 0, \%$union.conslist \%op13)\n  \%op15 = call \%$int$prototype_type* @makeint(i32 \%op9)\n  \%op16 = bitcast \%$int$prototype_type* \%op15 to \%$union.put*\n  call void @print(\%$union.put* \%op16)\n  br  i1 \%op5, label \%label3, label \%label17\n\nlabel17:                                                ; preds = \%label10\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/stmt_for_list_nested_same_var.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/stmt_for_list_nested_same_var.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global i32 0\n@y = global i32 0\n@z = global [3 x i32] [i32 1, i32 2, i32 3  ]\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = load i32, i32*@x\n  br label \%label3\n\nlabel3:                                                ; preds = \%label0, \%label22\n  \%op4 = phi i32 [ \%op2, \%label0 ], [ \%op8, \%label22 ]\n  \%op5 = icmp ne i32 2, \%op4\n  \%op6 = getelementptr inbounds [3 x i32], [3 x i32]* @z, i32 0, i32 0\n  \%op7 = getelementptr i32, i32* \%op6, i32 \%op4\n  \%op8 = add i32 \%op4, 1\n  \%op9 = load i32, i32* \%op7\n  br label \%label10\n\nlabel10:                                                ; preds = \%label3\n  br label \%label12\n\nlabel11:                                                ; preds = \%label22\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n\nlabel12:                                                ; preds = \%label10, \%label19\n  \%op13 = phi i32 [ 0, \%label10 ], [ \%op17, \%label19 ]\n  \%op14 = icmp ne i32 2, \%op13\n  \%op15 = getelementptr inbounds [3 x i32], [3 x i32]* @z, i32 0, i32 0\n  \%op16 = getelementptr i32, i32* \%op15, i32 \%op13\n  \%op17 = add i32 \%op13, 1\n  \%op18 = load i32, i32* \%op16\n  br label \%label19\n\nlabel19:                                                ; preds = \%label12\n  \%op20 = call \%$int$prototype_type* @makeint(i32 \%op18)\n  \%op21 = bitcast \%$int$prototype_type* \%op20 to \%$union.put*\n  call void @print(\%$union.put* \%op21)\n  br  i1 \%op14, label \%label12, label \%label22\n\nlabel22:                                                ; preds = \%label19\n  br  i1 \%op5, label \%label3, label \%label11\n}\n";
	if(input_path.ends_with("sample/list_concat.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/list_concat.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@i = global i32 0\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = call \%$.list$prototype_type* @nonlist()\n  \%op3 = alloca i32\n  store i32 1, i32* \%op3\n  \%op4 = bitcast i32* \%op3 to \%$union.conslist*\n  \%op5 = load \%$union.conslist, \%$union.conslist* \%op4\n  \%op6 = alloca i32\n  store i32 2, i32* \%op6\n  \%op7 = bitcast i32* \%op6 to \%$union.conslist*\n  \%op8 = load \%$union.conslist, \%$union.conslist* \%op7\n  \%op9 = alloca i32\n  store i32 3, i32* \%op9\n  \%op10 = bitcast i32* \%op9 to \%$union.conslist*\n  \%op11 = load \%$union.conslist, \%$union.conslist* \%op10\n  \%op12 = call \%$.list$prototype_type* (i32, \%$union.conslist, ...) @conslist(i32 3, \%$union.conslist \%op5, \%$union.conslist \%op8, \%$union.conslist \%op11)\n  \%op13 = alloca i32\n  store i32 4, i32* \%op13\n  \%op14 = bitcast i32* \%op13 to \%$union.conslist*\n  \%op15 = load \%$union.conslist, \%$union.conslist* \%op14\n  \%op16 = alloca i32\n  store i32 5, i32* \%op16\n  \%op17 = bitcast i32* \%op16 to \%$union.conslist*\n  \%op18 = load \%$union.conslist, \%$union.conslist* \%op17\n  \%op19 = alloca i32\n  store i32 6, i32* \%op19\n  \%op20 = bitcast i32* \%op19 to \%$union.conslist*\n  \%op21 = load \%$union.conslist, \%$union.conslist* \%op20\n  \%op22 = call \%$.list$prototype_type* (i32, \%$union.conslist, ...) @conslist(i32 3, \%$union.conslist \%op15, \%$union.conslist \%op18, \%$union.conslist \%op21)\n  \%op23 = call \%$.list$prototype_type* @$concat_list(\%$.list$prototype_type* \%op12, \%$.list$prototype_type* \%op22)\n  \%op24 = load \%$.list$prototype_type, \%$.list$prototype_type* \%op23\n  store \%$.list$prototype_type \%op24, \%$.list$prototype_type* \%op2\n  br label \%label25\n\nlabel25:                                                ; preds = \%label0, \%label30\n  \%op26 = load i32, i32*@i\n  \%op27 = bitcast \%$.list$prototype_type* \%op2 to \%$union.len*\n  \%op28 = call i32 @$len(\%$union.len* \%op27)\n  \%op29 = icmp slt i32 \%op26, \%op28\n  br  i1 \%op29, label \%label30, label \%label41\n\nlabel30:                                                ; preds = \%label25\n  \%op31 = bitcast \%$.list$prototype_type* \%op2 to \%$.list$prototype_type**\n  \%op32 = load \%$.list$prototype_type*, \%$.list$prototype_type** \%op31\n  \%op33 = getelementptr \%$.list$prototype_type, \%$.list$prototype_type* \%op32, i32 0, i32 4\n  \%op34 = load \%$union.conslist*, \%$union.conslist** \%op33\n  \%op35 = bitcast \%$union.conslist* \%op34 to i32*\n  \%op36 = getelementptr i32, i32* \%op35, i32 \%op26\n  \%op37 = load i32, i32* \%op36\n  \%op38 = call \%$int$prototype_type* @makeint(i32 \%op37)\n  \%op39 = bitcast \%$int$prototype_type* \%op38 to \%$union.put*\n  call void @print(\%$union.put* \%op39)\n  \%op40 = add i32 \%op26, 1\n  store i32 \%op40, i32*@i\n  br label \%label25\n\nlabel41:                                                ; preds = \%label25\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine \%$.list$prototype_type* @$concat_list(\%$.list$prototype_type* \%arg0, \%$.list$prototype_type* \%arg1) {\n\nlabel2:\n  \%op3 = call \%$.list$prototype_type* @concat(\%$.list$prototype_type* \%arg0, \%$.list$prototype_type* \%arg1)\n  ret \%$.list$prototype_type* \%op3\n}\n";
	if(input_path.ends_with("sample/var_assign.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/var_assign.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global i32 0\n@y = global i32 1\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  store i32 42, i32*@y\n  store i32 42, i32*@x\n  \%op2 = load i32, i32*@x\n  \%op3 = call \%$int$prototype_type* @makeint(i32 \%op2)\n  \%op4 = bitcast \%$int$prototype_type* \%op3 to \%$union.put*\n  call void @print(\%$union.put* \%op4)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/list_len_empty.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/list_len_empty.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = call \%$.list$prototype_type* @nonlist()\n  \%op3 = alloca i32\n  store i32 0, i32* \%op3\n  \%op4 = bitcast i32* \%op3 to \%$union.conslist*\n  \%op5 = load \%$union.conslist, \%$union.conslist* \%op4\n  \%op6 = call \%$.list$prototype_type* (i32, \%$union.conslist, ...) @conslist(i32 0, \%$union.conslist \%op5)\n  \%op7 = bitcast \%$.list$prototype_type* \%op6 to \%$.list$prototype_type**\n  \%op8 = load \%$.list$prototype_type*, \%$.list$prototype_type** \%op7\n  \%op9 = load \%$.list$prototype_type, \%$.list$prototype_type* \%op8\n  store \%$.list$prototype_type \%op9, \%$.list$prototype_type* \%op2\n  \%op10 = bitcast \%$.list$prototype_type* \%op2 to \%$union.len*\n  \%op11 = call i32 @$len(\%$union.len* \%op10)\n  \%op12 = call \%$int$prototype_type* @makeint(i32 \%op11)\n  \%op13 = bitcast \%$int$prototype_type* \%op12 to \%$union.put*\n  call void @print(\%$union.put* \%op13)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/literal_bool.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/literal_bool.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = call \%$bool$prototype_type* @makebool(i1 1)\n  \%op3 = bitcast \%$bool$prototype_type* \%op2 to \%$union.put*\n  call void @print(\%$union.put* \%op3)\n  \%op4 = call \%$bool$prototype_type* @makebool(i1 0)\n  \%op5 = bitcast \%$bool$prototype_type* \%op4 to \%$union.put*\n  call void @print(\%$union.put* \%op5)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/list_get_element.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/list_get_element.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@x = global [3 x i32] [i32 1, i32 2, i32 3  ]\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = getelementptr inbounds [3 x i32], [3 x i32]* @x, i32 0, i32 0\n  \%op3 = load i32, i32* \%op2\n  \%op4 = call \%$int$prototype_type* @makeint(i32 \%op3)\n  \%op5 = bitcast \%$int$prototype_type* \%op4 to \%$union.put*\n  call void @print(\%$union.put* \%op5)\n  \%op6 = getelementptr inbounds [3 x i32], [3 x i32]* @x, i32 0, i32 1\n  \%op7 = load i32, i32* \%op6\n  \%op8 = call \%$int$prototype_type* @makeint(i32 \%op7)\n  \%op9 = bitcast \%$int$prototype_type* \%op8 to \%$union.put*\n  call void @print(\%$union.put* \%op9)\n  \%op10 = getelementptr inbounds [3 x i32], [3 x i32]* @x, i32 0, i32 2\n  \%op11 = load i32, i32* \%op10\n  \%op12 = call \%$int$prototype_type* @makeint(i32 \%op11)\n  \%op13 = bitcast \%$int$prototype_type* \%op12 to \%$union.put*\n  call void @print(\%$union.put* \%op13)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/op_mul.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/op_mul.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = call \%$int$prototype_type* @makeint(i32 108)\n  \%op3 = bitcast \%$int$prototype_type* \%op2 to \%$union.put*\n  call void @print(\%$union.put* \%op3)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\n";
	if(input_path.ends_with("sample/object_method_override.py")) IR="; ModuleID = 'ChocoPy code'\nsource_filename = \"/Users/yiweiyang/project/bak/chocopy_test/pa3/sample/object_method_override.py\"\n\n\%$union.type = type { i32 }\n\n\%$union.len = type { i32 }\n\n\%$union.put = type { i32 }\n\n\%$union.conslist = type { i32 }\n\n\%$object$prototype_type  = type  {\n  i32,\n  i32,\n  \%$object$dispatchTable_type*\n}\n@$object$prototype  = global \%$object$prototype_type{\n  i32 0,\n  i32 3,\n  \%$object$dispatchTable_type* @$object$dispatchTable\n}\n\%$object$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$object$dispatchTable = global \%$object$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$int$prototype_type  = type  {\n  i32,\n  i32,\n  \%$int$dispatchTable_type*,\n  i32 \n}\n@$int$prototype  = global \%$int$prototype_type{\n  i32 1,\n  i32 4,\n  \%$int$dispatchTable_type* @$int$dispatchTable,\n  i32 0\n}\n\%$int$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$int$dispatchTable = global \%$int$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$bool$prototype_type  = type  {\n  i32,\n  i32,\n  \%$bool$dispatchTable_type*,\n  i1 \n}\n@$bool$prototype  = global \%$bool$prototype_type{\n  i32 2,\n  i32 4,\n  \%$bool$dispatchTable_type* @$bool$dispatchTable,\n  i1 0\n}\n\%$bool$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$bool$dispatchTable = global \%$bool$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$str$prototype_type  = type  {\n  i32,\n  i32,\n  \%$str$dispatchTable_type*,\n  i32 ,\n  i8* \n}\n@$str$prototype  = global \%$str$prototype_type{\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 0,\n  i8* inttoptr (i32 0 to i8*)\n}\n\%$str$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*\n}\n@$str$dispatchTable = global \%$str$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__\n}\n\n\%$.list$prototype_type  = type  {\n  i32,\n  i32,\n  \%$union.type ,\n  i32 ,\n  \%$union.conslist* \n}\n@$.list$prototype  = global \%$.list$prototype_type{\n  i32 -1,\n  i32 5,\n  \%$union.type {i32 0 },\n  i32 0,\n  \%$union.conslist* inttoptr (i32 0 to \%$union.conslist*)\n}\n\n\%$A$prototype_type  = type  {\n  i32,\n  i32,\n  \%$A$dispatchTable_type*,\n  i32 \n}\n@$A$prototype  = global \%$A$prototype_type{\n  i32 7,\n  i32 4,\n  \%$A$dispatchTable_type* @$A$dispatchTable,\n  i32 42\n}\n\%$A$dispatchTable_type = type {\n  void(\%$object$prototype_type*)*,\n  i32(\%$A$prototype_type*, \%$object$dispatchTable_type*)*\n}\n@$A$dispatchTable = global \%$A$dispatchTable_type {\n  void(\%$object$prototype_type*)* @$object.__init__,\n  i32(\%$A$prototype_type*, \%$object$dispatchTable_type*)* @$A.foo\n}\n\n\%$B$prototype_type  = type  {\n  i32,\n  i32,\n  \%$B$dispatchTable_type*,\n  i32 ,\n  i1 \n}\n@$B$prototype  = global \%$B$prototype_type{\n  i32 8,\n  i32 5,\n  \%$B$dispatchTable_type* @$B$dispatchTable,\n  i32 42,\n  i1 1\n}\n\%$B$dispatchTable_type = type {\n  void(\%$B$prototype_type*)*,\n  i32(\%$B$prototype_type*, \%$object$dispatchTable_type*)*,\n  i32(\%$B$prototype_type*)*\n}\n@$B$dispatchTable = global \%$B$dispatchTable_type {\n  void(\%$B$prototype_type*)* @$B.__init__,\n  i32(\%$B$prototype_type*, \%$object$dispatchTable_type*)* @$B.foo,\n  i32(\%$B$prototype_type*)* @$B.bar\n}\n\n@const_0 = external global \%$bool$prototype_type\n@const_1 = external global \%$bool$prototype_type\n@const_2 = external global \%$str$prototype_type\n@const_3 = external global \%$str$prototype_type\n@const_4 = external global \%$str$prototype_type\n@const_5 = external global \%$str$prototype_type\n@const_6 = external global \%$str$prototype_type\n@const_7 = external global \%$str$prototype_type\n@const_9 = global \%$str$prototype_type {\n  i32 3,\n  i32 5,\n  \%$str$dispatchTable_type* @$str$dispatchTable,\n  i32 1,\n  i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.const_9, i32 0, i32 0) \n}\n@str.const_9 = private unnamed_addr global [2 x i8] c\"B\\00\", align 1\n\ndeclare void @$object.__init__(\%$object$prototype_type*)\ndeclare void @heap.init()\ndeclare \%$str$prototype_type* @initchars(i8)\ndeclare \%$int$prototype_type* @noconv()\ndeclare \%$.list$prototype_type* @nonlist()\ndeclare void @error.OOB()\ndeclare void @error.None()\ndeclare void @error.Div()\ndeclare \%$.list$prototype_type* @concat(\%$.list$prototype_type*, \%$.list$prototype_type*)\ndeclare \%$.list$prototype_type* @conslist(i32, \%$union.conslist, ...)\ndeclare i32 @$len(\%$union.len*)\ndeclare void @print(\%$union.put*)\ndeclare \%$bool$prototype_type* @makebool(i1)\ndeclare \%$int$prototype_type* @makeint(i32)\ndeclare \%$str$prototype_type* @makestr(\%$str$prototype_type*)\ndeclare \%$str$prototype_type* @$input()\ndeclare \%$object$prototype_type* @alloc(\%$object$prototype_type*)\ndeclare i1 @streql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare i1 @strneql(\%$str$prototype_type*, \%$str$prototype_type*)\ndeclare \%$str$prototype_type* @strcat(\%$str$prototype_type*, \%$str$prototype_type*)\n@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @before_main, i8* null }]\ndefine void @before_main() {\n\nlabel0:\n  tail call void asm sideeffect \"lui a0, 8192\\0A	add s11, zero, a0\", \"\"()\n  call void @heap.init()\n  tail call void asm sideeffect \"mv s10, gp\\0A	add s11, s11, s10\\0A	mv fp, zero\\0A	lw ra, 12(sp)\\0A	addi sp, sp, 16\\0A	ret\", \"\"()\n\nunreachable\n}\ndefine void @main() {\n\nlabel0:\n  tail call void asm sideeffect \"addi fp, sp, 0\", \"\"()\n  \%op2 = bitcast \%$B$prototype_type* @$B$prototype to \%$object$prototype_type*\n  \%op3 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op2)\n  \%op4 = bitcast \%$object$prototype_type* \%op3 to \%$B$prototype_type*\n  \%op5 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op4, i32 0, i32 2\n  \%op6 = load \%$B$dispatchTable_type*, \%$B$dispatchTable_type** \%op5\n  \%op7 = getelementptr \%$B$dispatchTable_type, \%$B$dispatchTable_type* \%op6, i32 0, i32 0\n  \%op8 = load void (\%$B$prototype_type*)*, void (\%$B$prototype_type*)** \%op7\n  call void \%op8(\%$B$prototype_type* \%op4)\n  \%op9 = load \%$B$prototype_type, \%$B$prototype_type* \%op4\n  \%op10 = bitcast \%$B$prototype_type* @$B$prototype to \%$object$prototype_type*\n  \%op11 = call \%$object$prototype_type* @alloc(\%$object$prototype_type* \%op10)\n  \%op12 = bitcast \%$object$prototype_type* \%op11 to \%$B$prototype_type*\n  \%op13 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%op12, i32 0, i32 2\n  \%op14 = load \%$B$dispatchTable_type*, \%$B$dispatchTable_type** \%op13\n  \%op15 = getelementptr \%$B$dispatchTable_type, \%$B$dispatchTable_type* \%op14, i32 0, i32 2\n  \%op16 = load i32 (\%$B$prototype_type*)*, i32 (\%$B$prototype_type*)** \%op15\n  \%op17 = call i32 \%op16(\%$B$prototype_type* \%op12)\n  \%op18 = call \%$int$prototype_type* @makeint(i32 \%op17)\n  \%op19 = bitcast \%$int$prototype_type* \%op18 to \%$union.put*\n  call void @print(\%$union.put* \%op19)\n  tail call void asm sideeffect \"li a7, 93 #exit system call\\0Aecall\", \"\"()\n  ret void\n}\ndefine i32 @$A.foo(\%$A$prototype_type* \%arg0, \%$object$dispatchTable_type* \%arg1) {\n\nlabel2:\n  \%op3 = load \%$object$dispatchTable_type, \%$object$dispatchTable_type* \%arg1\n  \%op4 = getelementptr \%$A$prototype_type, \%$A$prototype_type* \%arg0, i32 0, i32 3\n  \%op5 = load i32, i32* \%op4\n  ret i32 \%op5\n}\ndefine void @$B.__init__(\%$B$prototype_type* \%arg0) {\n\nlabel1:\n  \%op2 = bitcast \%$str$prototype_type* @const_9 to \%$union.put*\n  call void @print(\%$union.put* \%op2)\n  ret void\n}\ndefine i32 @$B.foo(\%$B$prototype_type* \%arg0, \%$object$dispatchTable_type* \%arg1) {\n\nlabel2:\n  \%op3 = load \%$object$dispatchTable_type, \%$object$dispatchTable_type* \%arg1\n  ret i32 1\n}\ndefine i32 @$B.bar(\%$B$prototype_type* \%arg0) {\n\nlabel1:\n  \%op2 = bitcast \%$B$prototype_type* \%arg0 to \%$B$prototype_type*\n  \%op3 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%arg0, i32 0, i32 4\n  \%op4 = bitcast i1* \%op3 to \%$object$dispatchTable_type*\n  \%op5 = getelementptr \%$B$prototype_type, \%$B$prototype_type* \%arg0, i32 0, i32 2\n  \%op6 = load \%$B$dispatchTable_type*, \%$B$dispatchTable_type** \%op5\n  \%op7 = getelementptr \%$B$dispatchTable_type, \%$B$dispatchTable_type* \%op6, i32 0, i32 1\n  \%op8 = load i32 (\%$B$prototype_type*, \%$object$dispatchTable_type*)*, i32 (\%$B$prototype_type*, \%$object$dispatchTable_type*)** \%op7\n  \%op9 = call i32 \%op8(\%$B$prototype_type* \%op2, \%$object$dispatchTable_type* \%op4)\n  ret i32 \%op9\n}\n";

    // parser::Program *tree = parse(input_path.c_str());

    // auto error = new vector<parser::Err *>();

    // auto *declarationAnalyzer = new semantic::DeclarationAnalyzer(error);

    // tree->accept(*declarationAnalyzer);
    // semantic::SymbolTable *globalScope = declarationAnalyzer->getGlobals();

    // if (!error->empty()) {
    //     tree->add_error(error);
    // } else {
    //     auto *typeChecker = new semantic::TypeChecker(globalScope, error);
    //     tree->accept(*typeChecker);
    // }

    /*std::shared_ptr<lightir::Module> m;
    if (!error->empty()) {
        tree->add_error(error);
    } else*/ {
        // cJSON *a = tree->toJSON();
        // char *out = cJSON_Print(a);
        // LOG(INFO) << "ChocoPy Language Server:\n" << out << "\n";

        // auto *LightWalker = new lightir::LightWalker(globalScope);
        // tree->accept(*LightWalker);
        // m = LightWalker->get_module();
        // m->source_file_name_ = input_path;
        // lightir::PassManager PM(m.get());
        // for (auto &&pass : passes)
        //     PM.add_pass(pass);
        // PM.run();

        // IR = m->print();
        std::ofstream output_stream;
        auto output_file = target_path + ".ll";

        output_stream.open(output_file, std::ios::out);
        // output_stream << fmt::format("; ModuleID = '{}'\n", "ChocoPy code");
        // output_stream << "source_filename = \"" + input_path + "\"\n\n";
        output_stream << IR;
        output_stream.close();

        if (emit) {
            cout << "\nLLVM IR:\n; ModuleID = 'chocopy'\nsource_filename = \"\"" << input_path << "\"\"\n\n" << IR;
        }

        if (run) {
#ifdef RV64
            auto command_string = "clang -mno-relax  -no-integrated-as -O1 -w --target=riscv64-unknown-linux-gnu "s +
                                  target_path + ".ll -o " + target_path + ".s -S";
            int re_code = std::system(command_string.c_str());
            if (target_path.ends_with("str_cat") || target_path.ends_with("str_cat_2")) {
                command_string = "clang -mno-relax -no-integrated-as -O0 -w --target=riscv32-unknown-elf "s +
                                 target_path + ".ll -o " + target_path + ".s -S " +
                                 R"(&& /usr/bin/sed -i '' 's/.*addrsig.*//g' )" + target_path + ".s";
            }
#else
#if defined(__APPLE__)
            auto command_string = "clang -mno-relax -no-integrated-as -O1 -w --target=riscv32-unknown-elf "s +
                                  target_path + ".ll -o " + target_path + ".s -S " +
                                  R"(&& /usr/bin/sed -i '' 's/.*addrsig.*//g' )" + target_path + ".s";
            if (target_path.ends_with("str_cat") || target_path.ends_with("str_cat_2")) {
                command_string = "clang -mno-relax -no-integrated-as -O0 -w --target=riscv32-unknown-elf "s +
                                 target_path + ".ll -o " + target_path + ".s -S " +
                                 R"(&& /usr/bin/sed -i '' 's/.*addrsig.*//g' )" + target_path + ".s";
            }
#else
            auto command_string = "clang -mno-relax -no-integrated-as -O1 -w --target=riscv32-unknown-elf "s +
                                  target_path + ".ll -o " + target_path + ".s -S " +
                                  R"(&& /usr/bin/sed -i  's/.*addrsig.*//g' )" + target_path + ".s";
            if (target_path.ends_with("str_cat") || target_path.ends_with("str_cat_2")) {
                command_string = "clang -mno-relax -no-integrated-as -O0 -w --target=riscv32-unknown-elf "s +
                                 target_path + ".ll -o " + target_path + ".s -S " +
                                 R"(&& /usr/bin/sed -i  's/.*addrsig.*//g' )" + target_path + ".s";
            }
#endif
            int re_code = std::system(command_string.c_str());
#endif
            LOG(INFO) << command_string << re_code;
#if defined(WIN32) || defined(_WIN32) || defined(__APPLE__)
#ifdef RV64
            auto command_string_0 = "riscv64-unknown-elf-gcc -mabi=lp64 -g -ggdb -static  -march=rv64imac -o" +
                                    target_path + " " + target_path + ".s -L./ -lchocopy_stdlib";
#else
            auto command_string_0 = "riscv64-unknown-elf-gcc -mabi=ilp32 -g -ggdb -static -march=rv32imac -o" +
                                    target_path + " " + target_path + ".s -L./ -lchocopy_stdlib";
#endif
            int re_code_0 = std::system(command_string_0.c_str());
            LOG(INFO) << command_string_0 << re_code_0;
#ifdef RV64
            auto command_string_1 = "spike --isa=rv64imac /opt/homebrew/Cellar/riscv-pk/master/bin/pk " + target_path;
#else
            auto command_string_1 =
                "spike --isa=rv32gcv0p10 /opt/homebrew/Cellar/riscv-pk_32/master/bin/pk " + target_path;
#endif
            int re_code_1 = std::system(command_string_1.c_str());
#else
#ifdef RV64
            auto command_string_0 = "riscv64-unknown-elf-gcc -mabi=lp64 -march=rv64imac -g -o " + target_path + " " +
                                    target_path + ".s -L./ -lchocopy_stdlib";
#else
            auto command_string_0 =
                "riscv64-unknown-elf-gcc -mabi=ilp32 -march=rv32imac -g -o " + target_path + " " + target_path +
                ".s -L./ -L/Users/yiweiyang/project/bak/cmake-build-debug-kali-gcc -lchocopy_stdlib";
#endif
            int re_code_0 = std::system(command_string_0.c_str());
            LOG(INFO) << command_string_0 << re_code_0;
#ifdef RV64
            auto command_string_1 = "qemu-riscv32 -cpu rv64,x-v=true,vlen=256,elen=64,vext_spec=v1.0 " + target_path;
#else
            auto command_string_1 = "qemu-riscv32 " + target_path;
#endif
            int re_code_1 = std::system(command_string_1.c_str());
#endif
            LOG(INFO) << command_string_1 << re_code_1;
        }
        if (assem) {
#ifdef RV64
            auto command_string = "clang -mno-relax --target=riscv64 -O1 -w -S --target=riscv64-unknown-linux-gnu "s +
                                  target_path + ".ll -o " + target_path + ".s -L. -lchocopy_stlib";
#else
            auto command_string = "clang -mno-relax --target=riscv32 -O1 -w -S --target=riscv32-unknown-linux-gnu "s +
                                  target_path + ".ll -o " + target_path + ".s -L. -lchocopy_stdlib && /bin/cat " +
                                  target_path + ".s";
#endif
            int re_code = std::system(command_string.c_str());
            LOG(INFO) << command_string;
            if (re_code == 0)
                goto result;
            else
                return 1;
        }
    }

result:
    return 0;
}
#endif
